{"ast":null,"code":"var _jsxFileName = \"/home/aronberenyi/Code/ancrypto/src/components/Settings/CoinGrid.js\";\nimport React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport { DataContext } from '../contexts';\nimport CoinTile from './CoinTile';\nimport { breakPoints } from '../Shared';\nconst Grid = styled.div`\n    max-width: var(--max-width);\n    margin: var(--xl) auto;\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(200px, .8fr));\n    justify-content: center;\n    grid-gap: var(--l);\n    align-items: center;\n\n    @media( max-width: ${breakPoints.tablet}) {\n      grid-template-columns: repeat(auto-fill, minmax(150px, 1fr))\n  }\n\n    @media( max-width: ${breakPoints.smallMobile}) {\n      grid-template-columns: 1fr 1fr;\n    }\n\n`;\n\nfunction getLowerSectionCoins(coinList, filteredCoins) {\n  return Object.keys(filteredCoins).length > 0 ? Object.keys(filteredCoins).slice(0, 100) : coinList.slice(0, 100);\n}\n\nfunction displayCoins(coinList, topSection, favourites, filteredCoins) {\n  let keyList = topSection ? favourites : getLowerSectionCoins(coinList, filteredCoins);\n  return keyList.map(coinKey => {\n    return topSection ? /*#__PURE__*/React.createElement(CoinTile, {\n      topSection: true,\n      remove: true,\n      key: `${coinKey}GZDN`,\n      coinKey: coinKey,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }\n    }) : favourites && favourites.includes(coinKey) ? /*#__PURE__*/React.createElement(CoinTile, {\n      disabled: true,\n      key: `${coinKey}BRGGD`,\n      coinKey: coinKey,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }\n    }) : /*#__PURE__*/React.createElement(CoinTile, {\n      key: `${coinKey}DRMKL`,\n      coinKey: coinKey,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }\n    });\n  });\n}\n\nconst sortCoinList = cList => {\n  let sortedCoinList = [];\n  Object.keys(cList).forEach(key => {\n    let coinObj = cList[key];\n    const order = +coinObj['SortOrder'] - 1;\n    sortedCoinList[order] = coinObj['Symbol'];\n  });\n  return sortedCoinList;\n};\n\nexport default function CoinGrid({\n  topSection,\n  filteredCoins\n}) {\n  const {\n    favourites,\n    coinList\n  } = useContext(DataContext);\n  let sortedCoins = [];\n  useEffect(() => {\n    if (!topSection) {\n      sortedCoins = sortCoinList(coinList);\n      console.log(sortedCoins);\n    }\n  }, [coinList]);\n  return /*#__PURE__*/React.createElement(Grid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, displayCoins(sortedCoins, topSection, favourites, filteredCoins));\n}","map":{"version":3,"sources":["/home/aronberenyi/Code/ancrypto/src/components/Settings/CoinGrid.js"],"names":["React","useContext","styled","DataContext","CoinTile","breakPoints","Grid","div","tablet","smallMobile","getLowerSectionCoins","coinList","filteredCoins","Object","keys","length","slice","displayCoins","topSection","favourites","keyList","map","coinKey","includes","sortCoinList","cList","sortedCoinList","forEach","key","coinObj","order","CoinGrid","sortedCoins","useEffect","console","log"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react'\nimport styled from 'styled-components'\nimport { DataContext } from '../contexts'\nimport CoinTile from './CoinTile'\nimport {breakPoints} from '../Shared'\n\n\nconst Grid = styled.div`\n    max-width: var(--max-width);\n    margin: var(--xl) auto;\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(200px, .8fr));\n    justify-content: center;\n    grid-gap: var(--l);\n    align-items: center;\n\n    @media( max-width: ${breakPoints.tablet}) {\n      grid-template-columns: repeat(auto-fill, minmax(150px, 1fr))\n  }\n\n    @media( max-width: ${breakPoints.smallMobile}) {\n      grid-template-columns: 1fr 1fr;\n    }\n\n`\n\nfunction getLowerSectionCoins(coinList, filteredCoins) {\n    return (Object.keys(filteredCoins).length > 0) \n        ? Object.keys(filteredCoins).slice(0, 100)\n        : coinList.slice(0, 100)\n}\n\nfunction displayCoins(coinList, topSection, favourites, filteredCoins) {\n    let keyList = topSection\n      ? favourites\n      : getLowerSectionCoins(coinList, filteredCoins)\n\n    return keyList.map((coinKey) => {\n\n        return topSection \n          ? <CoinTile topSection remove  key={`${coinKey}GZDN`} coinKey={coinKey} /> \n          :  favourites && favourites.includes(coinKey)\n              ? <CoinTile disabled={true}  key={`${coinKey}BRGGD`} coinKey={coinKey} />\n              : <CoinTile key={`${coinKey}DRMKL`} coinKey={coinKey} />\n    })\n\n}\n\nconst sortCoinList = (cList) => {\n  let sortedCoinList = []\n  Object.keys(cList).forEach(key => {\n    let coinObj = cList[key]\n    const order = +coinObj['SortOrder'] -1\n    sortedCoinList[order] = coinObj['Symbol']\n  })\n  return sortedCoinList\n}\n\n\nexport default function CoinGrid({topSection, filteredCoins}) {\n\n    const { favourites, coinList } = useContext(DataContext);\n\n    let sortedCoins = []\n\n    useEffect(() => {\n      if (!topSection) {\n        sortedCoins = sortCoinList(coinList)\n        console.log(sortedCoins)\n      }\n    }, [coinList])\n\n    return (\n        <Grid>\n            {displayCoins( sortedCoins, topSection, favourites, filteredCoins )}\n        </Grid>\n    )\n}"]},"metadata":{},"sourceType":"module"}