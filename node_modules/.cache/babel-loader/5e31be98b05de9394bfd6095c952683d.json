{"ast":null,"code":"var _jsxFileName = \"/home/aronberenyi/Code/ancrypto/src/components/contexts/DataContext.js\";\nimport React, { useState, useEffect } from 'react';\nimport cc from 'cryptocompare';\nimport moment from 'moment';\nimport { isNull } from 'lodash';\ncc.setApiKey('6bce00cebd36b06c07f20e0e94c2a0fe1b0211dc0a8a8dc030f6fb8b4117f707');\nconst MAX_FAVOURITES = 10;\nconst TIME_UNITS = 10;\nexport const DataContext = React.createContext();\n\nfunction getCurrFavourite(favourites) {\n  let currFavInLocal = getFromLocal('currFavourite');\n\n  if (currFavInLocal) {\n    return currFavInLocal;\n  } else if (favourites) {\n    return favourites[0];\n  } else return null;\n}\n\nfunction getFromLocal(item) {\n  let data = JSON.parse(localStorage.getItem('ancrypto'));\n  let answer = data ? data[item] : null;\n  return answer;\n}\n\nconst fetchPrices = async coinsArr => {\n  console.log('=====FetchPrices called');\n  let returnData = [];\n  coinsArr.forEach(async coin => {\n    try {\n      let priceData = await cc.priceFull(coin, 'USD');\n      console.log('priceResponse', priceData);\n      returnData.push(priceData);\n    } catch (e) {\n      console.error('Fetch price error: ', coin, e);\n    }\n  });\n  console.log('pricesArr: ', returnData);\n  return returnData;\n};\n\nconst fetchCoins = async () => {\n  try {\n    console.log('==/=FetchCoins Called');\n    let coins = await cc.coinList();\n    coins = coins.Data;\n    const filteredCoinKeys = Object.keys(coins).filter(coinKey => coins[coinKey].IsTrading);\n    let filteredObj = {};\n    filteredCoinKeys.forEach(key => filteredObj[key] = coins[key]);\n    console.log(filteredObj);\n    return filteredObj;\n  } catch (e) {\n    console.error('Error during coin fetching: ', e);\n  }\n};\n\nconst historicalPromises = (currFavourite, interval) => {\n  let promises = [];\n\n  for (let i = TIME_UNITS; i > 0; i--) {\n    const date = moment().subtract(i, interval).toDate();\n    promises.push(cc.priceHistorical(currFavourite, ['USD'], date));\n  }\n\n  return Promise.all(promises);\n};\n\nconst fetchHistorical = async (currFavourite, interval) => {\n  const results = await historicalPromises(currFavourite, interval); // Test\n\n  console.log('Promises: ', results);\n  const historical = [{\n    name: currFavourite,\n    data: results.map((ticker, index) => [moment().subtract(TIME_UNITS - index, interval).valueOf(), ticker.USD])\n  }];\n  return historical;\n};\n\nconst isDay = () => {\n  const hour = new Date().getHours();\n  return hour < 20 && hour > 7;\n};\n\nexport const DataProvider = ({\n  children\n}) => {\n  // ==============STATE========================\n  const [page, setPage] = useState('dashboard');\n  const [firstVisit, setFirstVisit] = useState(localStorage.getItem('ancrypto') ? false : true);\n  const [favourites, setFavourites] = useState(firstVisit ? null : getFromLocal('favourites'));\n  const [currFavourite, setCurrFavourite] = useState(getCurrFavourite());\n  const [coinList, setCoinList] = useState([]);\n  const [filteredCoins, setFilteredCoins] = useState([]);\n  const [prices, setPrices] = useState(null);\n  const [historicalData, setHistoricalData] = useState([]);\n  const [historicalInterval, setHistoricalInterval] = useState(\"months\");\n  const [theme, setTheme] = useState(isDay() ? 'light' : 'dark'); // Fetch Coin data at startup\n\n  useEffect(() => {\n    const init = async () => {\n      try {\n        const coins = await fetchCoins();\n\n        if (currFavourite) {\n          const historical = await fetchHistorical(currFavourite, historicalInterval);\n          setHistoricalData(historical);\n        }\n\n        setCoinList(coins);\n      } catch (e) {\n        console.error('Error during startup coinList fetching: ', e);\n      }\n    };\n\n    init();\n  }, []); // Fetch the pices of favourites\n\n  useEffect(() => {\n    const updatePrices = async coinsArr => {\n      let newPrices = await fetchPrices(coinsArr);\n      setPrices(newPrices);\n    };\n\n    updatePrices(favourites);\n  }, [favourites]);\n\n  const addCoin = coinKey => {\n    if (!currFavourite) {\n      setCurrFavourite(coinKey);\n    }\n\n    if (favourites < MAX_FAVOURITES && !favourites.includes(coinKey)) {\n      setFavourites([...favourites, coinKey]);\n    }\n  };\n\n  useEffect(() => {\n    const updateHistoricalPrice = async () => {\n      if (currFavourite) {\n        try {\n          const historical = await fetchHistorical(currFavourite, historicalInterval);\n          setHistoricalData(historical);\n        } catch (e) {\n          console.error('Historical price fetching error: ', e);\n        }\n      }\n    };\n\n    setHistoricalData(null);\n    updateHistoricalPrice();\n  }, [currFavourite, historicalInterval]); // Handle localstorage updates\n\n  useEffect(() => {\n    localStorage.setItem('ancrypto', JSON.stringify({\n      favourites,\n      currFavourite\n    }));\n  }, [currFavourite, favourites]);\n\n  const removeCoin = coinKey => {\n    const updatedFavs = favourites.filter(key => key !== coinKey);\n\n    if (favourites.includes(coinKey)) {\n      console.log(true, favourites, coinKey);\n      setCurrFavourite(updatedFavs[0]);\n    }\n\n    setFavourites(updatedFavs);\n  };\n\n  const toggleTheme = () => {\n    setTheme(theme === 'light' ? 'dark' : 'light');\n  };\n\n  return /*#__PURE__*/React.createElement(DataContext.Provider, {\n    value: {\n      page,\n      theme,\n      toggleTheme,\n      coinList,\n      setPage,\n      historicalData,\n      favourites,\n      setFavourites,\n      historicalInterval,\n      setHistoricalInterval,\n      currFavourite,\n      setCurrFavourite,\n      filteredCoins,\n      setFilteredCoins,\n      addCoin,\n      removeCoin,\n      firstVisit,\n      prices\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 3\n    }\n  }, children);\n};","map":{"version":3,"sources":["/home/aronberenyi/Code/ancrypto/src/components/contexts/DataContext.js"],"names":["React","useState","useEffect","cc","moment","isNull","setApiKey","MAX_FAVOURITES","TIME_UNITS","DataContext","createContext","getCurrFavourite","favourites","currFavInLocal","getFromLocal","item","data","JSON","parse","localStorage","getItem","answer","fetchPrices","coinsArr","console","log","returnData","forEach","coin","priceData","priceFull","push","e","error","fetchCoins","coins","coinList","Data","filteredCoinKeys","Object","keys","filter","coinKey","IsTrading","filteredObj","key","historicalPromises","currFavourite","interval","promises","i","date","subtract","toDate","priceHistorical","Promise","all","fetchHistorical","results","historical","name","map","ticker","index","valueOf","USD","isDay","hour","Date","getHours","DataProvider","children","page","setPage","firstVisit","setFirstVisit","setFavourites","setCurrFavourite","setCoinList","filteredCoins","setFilteredCoins","prices","setPrices","historicalData","setHistoricalData","historicalInterval","setHistoricalInterval","theme","setTheme","init","updatePrices","newPrices","addCoin","includes","updateHistoricalPrice","setItem","stringify","removeCoin","updatedFavs","toggleTheme"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport cc from 'cryptocompare'\nimport moment from 'moment'\nimport { isNull } from 'lodash';\n\n\ncc.setApiKey('6bce00cebd36b06c07f20e0e94c2a0fe1b0211dc0a8a8dc030f6fb8b4117f707')\n\nconst MAX_FAVOURITES = 10;\nconst TIME_UNITS = 10; \n\nexport const DataContext = React.createContext();\n\nfunction getCurrFavourite(favourites) {\n  let currFavInLocal = getFromLocal('currFavourite')\n  if (currFavInLocal) {return currFavInLocal}\n  else if (favourites) {return favourites[0]}\n  else return null\n}\n\nfunction getFromLocal (item) {\n  let data = JSON.parse(localStorage.getItem('ancrypto'))\n  let answer = data ? data[item] : null;\n  return answer\n}\n\nconst fetchPrices = async (coinsArr) => {\n  console.log('=====FetchPrices called')\n        \n  let returnData = [];\n  coinsArr.forEach(async (coin) => {\n    try {\n        let priceData = await cc.priceFull(coin, 'USD');\n        console.log('priceResponse', priceData)\n        returnData.push(priceData)\n    } catch(e) { console.error('Fetch price error: ', coin, e) }\n  })\n  console.log('pricesArr: ', returnData)\n  return returnData\n    \n}\n\nconst fetchCoins = async () => {\n  try {\n    console.log('==/=FetchCoins Called');\n  let coins = await cc.coinList()\n  coins = coins.Data\n  const filteredCoinKeys = Object.keys(coins).filter(coinKey => coins[coinKey].IsTrading)\n  let filteredObj = {}\n  filteredCoinKeys.forEach(key => filteredObj[key] = coins[key])\n  console.log(filteredObj)\n  return filteredObj\n  }\n  catch(e) {console.error('Error during coin fetching: ',e)}\n}\n\nconst historicalPromises = (currFavourite, interval) => {\n  let promises = [];\n  for (let i = TIME_UNITS; i > 0; i--) {\n    const date = moment().subtract(i, interval).toDate()\n    promises.push(\n      cc.priceHistorical(\n        currFavourite, \n        ['USD'], \n        date\n    ))\n  }\n  return Promise.all(promises)\n\n}\n\nconst fetchHistorical = async (currFavourite, interval) => {\n\n  const results = await historicalPromises(currFavourite, interval)\n  // Test\n  console.log('Promises: ',results)\n  const historical = [\n    {\n      name: currFavourite,\n      data: results.map((ticker, index) => [\n        moment().subtract(TIME_UNITS - index, interval).valueOf(),\n        ticker.USD\n      ])\n    }\n  ]\n  return historical\n}\n\n  const isDay = () => {\n    const hour = new Date().getHours();\n    return (hour < 20 && hour > 7) \n  }\n\nexport const DataProvider = ({children}) => {\n\n  // ==============STATE========================\n  const [page, setPage] = useState('dashboard');\n  const [firstVisit, setFirstVisit] = useState(localStorage.getItem('ancrypto') ? false : true)\n  const [favourites, setFavourites] = useState(firstVisit ? null : getFromLocal('favourites'));\n  const [currFavourite, setCurrFavourite] = useState(getCurrFavourite())\n  const [coinList, setCoinList] = useState([])\n  const [filteredCoins, setFilteredCoins] = useState([])\n  const [prices, setPrices] = useState(null);\n  const [historicalData, setHistoricalData] = useState([])\n  const [historicalInterval, setHistoricalInterval] = useState(\"months\")\n  const [theme, setTheme] = useState(isDay() ? 'light' : 'dark' );\n\n  // Fetch Coin data at startup\n  useEffect(() => {\n\n    const init = async () => {\n      try {\n        const coins = await fetchCoins()\n        if (currFavourite) {\n          const historical = await fetchHistorical(currFavourite, historicalInterval)\n          setHistoricalData(historical)\n        }\n        setCoinList(coins)\n\n      } catch(e) {console.error('Error during startup coinList fetching: ', (e))}\n\n    }           \n\n    init()\n\n  }, [])\n\n  // Fetch the pices of favourites\n  useEffect(() => {\n\n    const updatePrices = async (coinsArr) => {\n      let newPrices = await fetchPrices(coinsArr)\n      setPrices(newPrices)\n    }\n    updatePrices(favourites)\n\n  },[favourites])\n\n  const addCoin = coinKey => {\n    if(!currFavourite) {setCurrFavourite(coinKey)}\n    if((favourites < MAX_FAVOURITES ) && !favourites.includes(coinKey)) {\n      setFavourites([...favourites, coinKey]);\n    }\n  }\n\n  useEffect(() => {\n    const updateHistoricalPrice = async () => {\n      if (currFavourite) {\n        try {\n          const historical = await fetchHistorical(currFavourite, historicalInterval)\n          setHistoricalData(historical)\n\n        } catch(e) {console.error('Historical price fetching error: ', e)}\n      }\n    }\n    setHistoricalData(null)\n    updateHistoricalPrice()\n\n  }, [currFavourite, historicalInterval])\n  // Handle localstorage updates\n  useEffect(() => {\n    localStorage.setItem('ancrypto', JSON.stringify({\n      favourites,\n      currFavourite\n    }))\n  },[currFavourite, favourites])\n\n  const removeCoin = coinKey => {\n    const updatedFavs = favourites.filter(key => key !== coinKey)\n    if( favourites.includes(coinKey) ) {console.log(true, favourites, coinKey) ; setCurrFavourite(updatedFavs[0])}\n    setFavourites(updatedFavs)\n  }\n\n  const toggleTheme = () => {\n    setTheme(theme === 'light' ? 'dark' : 'light')\n  }\n\n  return (\n  <DataContext.Provider value={\n    {\n      page, \n      theme,\n      toggleTheme,\n      coinList,\n      setPage, \n      historicalData,\n      favourites,\n      setFavourites,\n      historicalInterval,\n      setHistoricalInterval,\n      currFavourite,\n      setCurrFavourite, \n      filteredCoins,\n      setFilteredCoins,\n      addCoin, \n      removeCoin, \n      firstVisit,\n      prices\n    }\n  }>{children}</DataContext.Provider>\n  )\n}"]},"metadata":{},"sourceType":"module"}