{"ast":null,"code":"var _jsxFileName = \"/home/aronberenyi/Code/ancrypto/src/components/contexts/DataContext.js\";\nimport React, { useState, useEffect } from 'react';\nimport cc from 'cryptocompare';\ncc.setApiKey('6bce00cebd36b06c07f20e0e94c2a0fe1b0211dc0a8a8dc030f6fb8b4117f707');\nconst MAX_FAVOURITES = 10;\nexport const DataContext = React.createContext();\n\nfunction getCurrFavourite(favourites) {\n  let currFavInLocal = getFromLocal('currFavourite');\n\n  if (currFavInLocal) {\n    return currFavInLocal;\n  } else if (favourites) {\n    return favourites[0];\n  } else return [];\n}\n\nfunction getFromLocal(item) {\n  let data = JSON.parse(localStorage.getItem('ancrypto'));\n  let answer = data ? data[item] : [];\n  return answer;\n}\n\nexport const DataProvider = ({\n  children\n}) => {\n  // ==============STATE========================\n  const [page, setPage] = useState('dashboard');\n  const [firstVisit, setFirstVisit] = useState(localStorage.getItem('ancrypto') ? false : true);\n  const [favourites, setFavourites] = useState(firstVisit ? [] : getFromLocal('favourites'));\n  const [currFavourite, setCurrFavourite] = useState(getCurrFavourite());\n  const [coinList, setCoinList] = useState(null);\n  const [filteredCoins, setFilteredCoins] = useState([]);\n  const [prices, setPrices] = useState(null); // if (!favourites.length) {setCurrFavourite([])} {\n  // localStorage.setItem('ancrypto', JSON.stringify({favourites, currFavourite}))\n  // }\n  // Write favourites into localstorage\n  // useEffect(() => {\n  //   if ((!favourites.includes(currFavourite)) && (favourites.length > 0)) {\n  //     setCurrFavourite(favourites[0])}\n  // },[favourites])\n  // Fetch Coin data at startup\n\n  useEffect(() => {\n    const fetchCoins = async () => {\n      let coins = await cc.coinList();\n      coins = coins.Data;\n\n      try {\n        return coins;\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    const updateStateWithCoins = async () => {\n      const coins = await fetchCoins();\n      setCoinList(coins);\n    };\n\n    updateStateWithCoins();\n  }, []); // Fetch the pices of favourites\n\n  useEffect(() => {\n    const fetchPrices = async coinsArr => {\n      const returnData = [];\n      coinsArr.forEach(async coin => {\n        try {\n          let priceData = await cc.priceFull(coin, 'USD');\n          returnData.push(priceData);\n        } catch (e) {\n          console.error('Fetch price error: ', e);\n        }\n      });\n      return returnData;\n    };\n\n    const updatePrices = async coinsArr => {\n      let newPrices = await fetchPrices(coinsArr);\n      setPrices(newPrices);\n    };\n\n    updatePrices(favourites);\n  }, [favourites]);\n\n  const addCoin = coinKey => {\n    if (currFavourite.length === 0) {\n      setCurrFavourite(coinKey);\n    }\n\n    if (favourites.length < MAX_FAVOURITES && !favourites.includes(coinKey)) {\n      setFavourites([...favourites, coinKey]);\n    }\n  }; // Handle localstorage updates\n\n\n  useEffect(() => {\n    localStorage.setItem('ancrypto', JSON.stringify({\n      favourites,\n      currFavourite\n    }));\n  }, [currFavourite, favourites]);\n\n  const removeCoin = coinKey => {\n    if (favourites.includes(coinKey)) {\n      setCurrFavourite(favourites[0]);\n    }\n\n    setFavourites(favourites.filter(key => key !== coinKey));\n  };\n\n  return /*#__PURE__*/React.createElement(DataContext.Provider, {\n    value: {\n      page,\n      coinList,\n      setPage,\n      favourites,\n      setFavourites,\n      currFavourite,\n      setCurrFavourite,\n      filteredCoins,\n      setFilteredCoins,\n      addCoin,\n      removeCoin,\n      firstVisit,\n      prices\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 3\n    }\n  }, children);\n};","map":{"version":3,"sources":["/home/aronberenyi/Code/ancrypto/src/components/contexts/DataContext.js"],"names":["React","useState","useEffect","cc","setApiKey","MAX_FAVOURITES","DataContext","createContext","getCurrFavourite","favourites","currFavInLocal","getFromLocal","item","data","JSON","parse","localStorage","getItem","answer","DataProvider","children","page","setPage","firstVisit","setFirstVisit","setFavourites","currFavourite","setCurrFavourite","coinList","setCoinList","filteredCoins","setFilteredCoins","prices","setPrices","fetchCoins","coins","Data","e","console","log","updateStateWithCoins","fetchPrices","coinsArr","returnData","forEach","coin","priceData","priceFull","push","error","updatePrices","newPrices","addCoin","coinKey","length","includes","setItem","stringify","removeCoin","filter","key"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,EAAP,MAAe,eAAf;AAGAA,EAAE,CAACC,SAAH,CAAa,kEAAb;AAEA,MAAMC,cAAc,GAAG,EAAvB;AAEA,OAAO,MAAMC,WAAW,GAAGN,KAAK,CAACO,aAAN,EAApB;;AAEP,SAASC,gBAAT,CAA0BC,UAA1B,EAAsC;AACpC,MAAIC,cAAc,GAAGC,YAAY,CAAC,eAAD,CAAjC;;AACA,MAAID,cAAJ,EAAoB;AAAC,WAAOA,cAAP;AAAsB,GAA3C,MACK,IAAID,UAAJ,EAAgB;AAAC,WAAOA,UAAU,CAAC,CAAD,CAAjB;AAAqB,GAAtC,MACA,OAAO,EAAP;AACN;;AAED,SAASE,YAAT,CAAuBC,IAAvB,EAA6B;AAC3B,MAAIC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAX,CAAX;AACA,MAAIC,MAAM,GAAGL,IAAI,GAAGA,IAAI,CAACD,IAAD,CAAP,GAAgB,EAAjC;AACA,SAAOM,MAAP;AACD;;AAED,OAAO,MAAMC,YAAY,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AAE1C;AACA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBrB,QAAQ,CAAC,WAAD,CAAhC;AACA,QAAM,CAACsB,UAAD,EAAaC,aAAb,IAA8BvB,QAAQ,CAACe,YAAY,CAACC,OAAb,CAAqB,UAArB,IAAmC,KAAnC,GAA2C,IAA5C,CAA5C;AACA,QAAM,CAACR,UAAD,EAAagB,aAAb,IAA8BxB,QAAQ,CAACsB,UAAU,GAAG,EAAH,GAAQZ,YAAY,CAAC,YAAD,CAA/B,CAA5C;AACA,QAAM,CAACe,aAAD,EAAgBC,gBAAhB,IAAoC1B,QAAQ,CAACO,gBAAgB,EAAjB,CAAlD;AACA,QAAM,CAACoB,QAAD,EAAWC,WAAX,IAA0B5B,QAAQ,CAAC,IAAD,CAAxC;AACA,QAAM,CAAC6B,aAAD,EAAgBC,gBAAhB,IAAoC9B,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAAC+B,MAAD,EAASC,SAAT,IAAsBhC,QAAQ,CAAC,IAAD,CAApC,CAT0C,CAgBxC;AACA;AACA;AAEF;AAGA;AACA;AACA;AACA;AAEA;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgC,UAAU,GAAG,YAAY;AAC7B,UAAIC,KAAK,GAAG,MAAMhC,EAAE,CAACyB,QAAH,EAAlB;AACAO,MAAAA,KAAK,GAAGA,KAAK,CAACC,IAAd;;AACA,UAAI;AAAC,eAAOD,KAAP;AAAa,OAAlB,CACA,OAAME,CAAN,EAAS;AAACC,QAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AAAe;AAC5B,KALC;;AAMA,UAAMG,oBAAoB,GAAG,YAAY;AACvC,YAAML,KAAK,GAAG,MAAMD,UAAU,EAA9B;AACAL,MAAAA,WAAW,CAACM,KAAD,CAAX;AACD,KAHD;;AAKAK,IAAAA,oBAAoB;AAErB,GAdQ,EAcN,EAdM,CAAT,CA7B0C,CA6C1C;;AACAtC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMuC,WAAW,GAAG,MAAOC,QAAP,IAAoB;AAEtC,YAAMC,UAAU,GAAG,EAAnB;AACAD,MAAAA,QAAQ,CAACE,OAAT,CAAiB,MAAOC,IAAP,IAAgB;AAC/B,YAAI;AACA,cAAIC,SAAS,GAAG,MAAM3C,EAAE,CAAC4C,SAAH,CAAaF,IAAb,EAAmB,KAAnB,CAAtB;AACAF,UAAAA,UAAU,CAACK,IAAX,CAAgBF,SAAhB;AACH,SAHD,CAGE,OAAMT,CAAN,EAAS;AAAEC,UAAAA,OAAO,CAACW,KAAR,CAAc,qBAAd,EAAqCZ,CAArC;AAAyC;AACvD,OALD;AAMA,aAAOM,UAAP;AAED,KAXD;;AAYA,UAAMO,YAAY,GAAG,MAAOR,QAAP,IAAoB;AACvC,UAAIS,SAAS,GAAG,MAAMV,WAAW,CAACC,QAAD,CAAjC;AACAT,MAAAA,SAAS,CAACkB,SAAD,CAAT;AACD,KAHD;;AAIAD,IAAAA,YAAY,CAACzC,UAAD,CAAZ;AACD,GAlBQ,EAkBP,CAACA,UAAD,CAlBO,CAAT;;AAoBA,QAAM2C,OAAO,GAAGC,OAAO,IAAI;AACzB,QAAG3B,aAAa,CAAC4B,MAAd,KAAyB,CAA5B,EAA+B;AAAC3B,MAAAA,gBAAgB,CAAC0B,OAAD,CAAhB;AAA0B;;AAC1D,QAAI5C,UAAU,CAAC6C,MAAX,GAAoBjD,cAArB,IAAyC,CAACI,UAAU,CAAC8C,QAAX,CAAoBF,OAApB,CAA7C,EAA2E;AACzE5B,MAAAA,aAAa,CAAC,CAAC,GAAGhB,UAAJ,EAAgB4C,OAAhB,CAAD,CAAb;AACD;AACF,GALD,CAlE0C,CAwE1C;;;AACAnD,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,YAAY,CAACwC,OAAb,CAAqB,UAArB,EAAiC1C,IAAI,CAAC2C,SAAL,CAAe;AAC9ChD,MAAAA,UAD8C;AAE9CiB,MAAAA;AAF8C,KAAf,CAAjC;AAID,GALQ,EAKP,CAACA,aAAD,EAAgBjB,UAAhB,CALO,CAAT;;AAOA,QAAMiD,UAAU,GAAGL,OAAO,IAAI;AAC5B,QAAI5C,UAAU,CAAC8C,QAAX,CAAoBF,OAApB,CAAJ,EAAmC;AAAC1B,MAAAA,gBAAgB,CAAClB,UAAU,CAAC,CAAD,CAAX,CAAhB;AAAgC;;AACpEgB,IAAAA,aAAa,CAAChB,UAAU,CAACkD,MAAX,CAAkBC,GAAG,IAAIA,GAAG,KAAKP,OAAjC,CAAD,CAAb;AACD,GAHD;;AAOA,sBACA,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EACzB;AACEhC,MAAAA,IADF;AAEEO,MAAAA,QAFF;AAGEN,MAAAA,OAHF;AAIEb,MAAAA,UAJF;AAKEgB,MAAAA,aALF;AAMEC,MAAAA,aANF;AAOEC,MAAAA,gBAPF;AAQEG,MAAAA,aARF;AASEC,MAAAA,gBATF;AAUEqB,MAAAA,OAVF;AAWEM,MAAAA,UAXF;AAYEnC,MAAAA,UAZF;AAaES,MAAAA;AAbF,KADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAgBGZ,QAhBH,CADA;AAmBD,CA1GM","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport cc from 'cryptocompare'\n\n\ncc.setApiKey('6bce00cebd36b06c07f20e0e94c2a0fe1b0211dc0a8a8dc030f6fb8b4117f707')\n\nconst MAX_FAVOURITES = 10;\n\nexport const DataContext = React.createContext();\n\nfunction getCurrFavourite(favourites) {\n  let currFavInLocal = getFromLocal('currFavourite')\n  if (currFavInLocal) {return currFavInLocal}\n  else if (favourites) {return favourites[0]}\n  else return []\n}\n\nfunction getFromLocal (item) {\n  let data = JSON.parse(localStorage.getItem('ancrypto'))\n  let answer = data ? data[item] : [];\n  return answer\n}\n\nexport const DataProvider = ({children}) => {\n\n  // ==============STATE========================\n  const [page, setPage] = useState('dashboard');\n  const [firstVisit, setFirstVisit] = useState(localStorage.getItem('ancrypto') ? false : true)\n  const [favourites, setFavourites] = useState(firstVisit ? [] : getFromLocal('favourites'));\n  const [currFavourite, setCurrFavourite] = useState(getCurrFavourite())\n  const [coinList, setCoinList] = useState(null)\n  const [filteredCoins, setFilteredCoins] = useState([])\n  const [prices, setPrices] = useState(null);\n\n\n \n\n\n \n    // if (!favourites.length) {setCurrFavourite([])} {\n    // localStorage.setItem('ancrypto', JSON.stringify({favourites, currFavourite}))\n    // }\n\n  // Write favourites into localstorage\n \n\n  // useEffect(() => {\n  //   if ((!favourites.includes(currFavourite)) && (favourites.length > 0)) {\n  //     setCurrFavourite(favourites[0])}\n  // },[favourites])\n\n  // Fetch Coin data at startup\n  useEffect(() => {\n    const fetchCoins = async () => {\n      let coins = await cc.coinList()\n      coins = coins.Data\n      try {return coins}\n      catch(e) {console.log(e)}\n  }\n    const updateStateWithCoins = async () => {\n      const coins = await fetchCoins()\n      setCoinList(coins)\n    }           \n\n    updateStateWithCoins()\n\n  }, [])\n\n  // Fetch the pices of favourites\n  useEffect(() => {\n    const fetchPrices = async (coinsArr) => {\n        \n      const returnData = [];\n      coinsArr.forEach(async (coin) => {\n        try {\n            let priceData = await cc.priceFull(coin, 'USD');\n            returnData.push(priceData)\n        } catch(e) { console.error('Fetch price error: ', e) }\n      })\n      return returnData\n        \n    }\n    const updatePrices = async (coinsArr) => {\n      let newPrices = await fetchPrices(coinsArr)\n      setPrices(newPrices)\n    }\n    updatePrices(favourites) \n  },[favourites])\n\n  const addCoin = coinKey => {\n    if(currFavourite.length === 0) {setCurrFavourite(coinKey)}\n    if((favourites.length < MAX_FAVOURITES ) && !favourites.includes(coinKey)) {\n      setFavourites([...favourites, coinKey]);\n    }\n  }\n  // Handle localstorage updates\n  useEffect(() => {\n    localStorage.setItem('ancrypto', JSON.stringify({\n      favourites,\n      currFavourite\n    }))\n  },[currFavourite, favourites])\n\n  const removeCoin = coinKey => {\n    if( favourites.includes(coinKey) ) {setCurrFavourite(favourites[0])}\n    setFavourites(favourites.filter(key => key !== coinKey))\n  }\n\n\n\n  return (\n  <DataContext.Provider value={\n    {\n      page, \n      coinList,\n      setPage, \n      favourites,\n      setFavourites,\n      currFavourite,\n      setCurrFavourite, \n      filteredCoins,\n      setFilteredCoins,\n      addCoin, \n      removeCoin, \n      firstVisit,\n      prices\n    }\n  }>{children}</DataContext.Provider>\n  )\n}"]},"metadata":{},"sourceType":"module"}