{"ast":null,"code":"var _jsxFileName = \"/home/aronberenyi/Code/ancrypto/src/components/contexts/DataContext.js\";\nimport React, { useState, useEffect } from 'react';\nimport cc from 'cryptocompare';\ncc.setApiKey('6bce00cebd36b06c07f20e0e94c2a0fe1b0211dc0a8a8dc030f6fb8b4117f707');\nconst MAX_FAVOURITES = 10;\nexport const DataContext = React.createContext();\nexport const DataProvider = ({\n  children\n}) => {\n  // ==============STATE========================\n  const [page, setPage] = useState('dashboard');\n  const [firstVisit, setFirstVisit] = useState(localStorage.getItem('ancrypto') ? false : true);\n  const [favourites, setFavourites] = useState(firstVisit ? [] : getFavsFromLocal());\n  const [currFavourite, setCurrFavourite] = useState(favourites.length > 0 ? favourites[0] : null);\n  const [coinList, setCoinList] = useState(null);\n  const [filteredCoins, setFilteredCoins] = useState([]);\n  const [prices, setPrices] = useState(null);\n\n  function getFavsFromLocal() {\n    let data = JSON.parse(localStorage.getItem('ancrypto'));\n    let favs = data.favourites;\n    return favs ? favs : [];\n  }\n\n  const addCoin = coinKey => {\n    if (favourites.length < MAX_FAVOURITES && !favourites.includes(coinKey)) {\n      setFavourites([...favourites, coinKey]);\n    }\n  };\n\n  const updateFavsInLocalStorage = favourites => {\n    localStorage.setItem('ancrypto', JSON.stringify({\n      favourites,\n      currFavourite\n    }));\n  }; // Write favourites into localstorage\n\n\n  useEffect(() => {\n    updateFavsInLocalStorage(favourites);\n  }, [favourites, currFavourite]);\n  useEffect(() => {}, [currFavourite]); // Fetch Coin data at startup\n\n  useEffect(() => {\n    const fetchCoins = async () => {\n      let coins = await cc.coinList();\n      coins = coins.Data;\n\n      try {\n        return coins;\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    const updateStateWithCoins = async () => {\n      const coins = await fetchCoins();\n      setCoinList(coins);\n    };\n\n    updateStateWithCoins();\n  }, []); // Fetch the pices of favourites\n\n  useEffect(() => {\n    const fetchPrices = async coinsArr => {\n      const returnData = [];\n      coinsArr.forEach(async coin => {\n        try {\n          let priceData = await cc.priceFull(coin, 'USD');\n          returnData.push(priceData);\n        } catch (e) {\n          console.error('Fetch price error: ', e);\n        }\n      });\n      return returnData;\n    };\n\n    const updatePrices = async coinsArr => {\n      let newPrices = await fetchPrices(coinsArr);\n      setPrices(newPrices);\n    };\n\n    updatePrices(favourites);\n  }, [favourites]);\n\n  const removeCoin = coinKey => {\n    setFavourites(favourites.filter(key => key !== coinKey));\n  };\n\n  return /*#__PURE__*/React.createElement(DataContext.Provider, {\n    value: {\n      page,\n      coinList,\n      setPage,\n      favourites,\n      setFavourites,\n      currFavourite,\n      setCurrFavourite,\n      filteredCoins,\n      setFilteredCoins,\n      addCoin,\n      removeCoin,\n      firstVisit,\n      prices\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 3\n    }\n  }, children);\n};","map":{"version":3,"sources":["/home/aronberenyi/Code/ancrypto/src/components/contexts/DataContext.js"],"names":["React","useState","useEffect","cc","setApiKey","MAX_FAVOURITES","DataContext","createContext","DataProvider","children","page","setPage","firstVisit","setFirstVisit","localStorage","getItem","favourites","setFavourites","getFavsFromLocal","currFavourite","setCurrFavourite","length","coinList","setCoinList","filteredCoins","setFilteredCoins","prices","setPrices","data","JSON","parse","favs","addCoin","coinKey","includes","updateFavsInLocalStorage","setItem","stringify","fetchCoins","coins","Data","e","console","log","updateStateWithCoins","fetchPrices","coinsArr","returnData","forEach","coin","priceData","priceFull","push","error","updatePrices","newPrices","removeCoin","filter","key"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport cc from 'cryptocompare'\n\n\ncc.setApiKey('6bce00cebd36b06c07f20e0e94c2a0fe1b0211dc0a8a8dc030f6fb8b4117f707')\n\nconst MAX_FAVOURITES = 10;\n\nexport const DataContext = React.createContext();\n\n\nexport const DataProvider = ({children}) => {\n\n  // ==============STATE========================\n  const [page, setPage] = useState('dashboard');\n  const [firstVisit, setFirstVisit] = useState(localStorage.getItem('ancrypto') ? false : true)\n  const [favourites, setFavourites] = useState(firstVisit ? [] : getFavsFromLocal());\n  const [currFavourite, setCurrFavourite] = useState(favourites.length > 0 ? favourites[0] : null)\n  const [coinList, setCoinList] = useState(null)\n  const [filteredCoins, setFilteredCoins] = useState([])\n  const [prices, setPrices] = useState(null);\n\n  function getFavsFromLocal() {\n    let data = JSON.parse(localStorage.getItem('ancrypto'))\n    let favs = data.favourites;\n    return favs ? favs : []\n  }\n\n  const addCoin = coinKey => {\n    if((favourites.length < MAX_FAVOURITES ) && !favourites.includes(coinKey)) {\n      setFavourites([...favourites, coinKey]);\n    }\n  }\n  const updateFavsInLocalStorage = (favourites) => {\n    localStorage.setItem('ancrypto', JSON.stringify({favourites, currFavourite}))\n  }\n\n  // Write favourites into localstorage\n  useEffect(() => {\n    updateFavsInLocalStorage(favourites)\n  }, [favourites, currFavourite])\n\n  useEffect(() => {\n    \n  },[currFavourite])\n\n  // Fetch Coin data at startup\n  useEffect(() => {\n    const fetchCoins = async () => {\n      let coins = await cc.coinList()\n      coins = coins.Data\n      try {return coins}\n      catch(e) {console.log(e)}\n  }\n    const updateStateWithCoins = async () => {\n      const coins = await fetchCoins()\n      setCoinList(coins)\n    }           \n\n    updateStateWithCoins()\n\n  }, [])\n\n  // Fetch the pices of favourites\n  useEffect(() => {\n      \n    const fetchPrices = async (coinsArr) => {\n        \n      const returnData = [];\n      coinsArr.forEach(async (coin) => {\n        try {\n            let priceData = await cc.priceFull(coin, 'USD');\n            returnData.push(priceData)\n        } catch(e) { console.error('Fetch price error: ', e) }\n      })\n      return returnData\n        \n    }\n    const updatePrices = async (coinsArr) => {\n      let newPrices = await fetchPrices(coinsArr)\n      setPrices(newPrices)\n    }\n    updatePrices(favourites) \n  },[favourites])\n\n  const removeCoin = coinKey => {\n    setFavourites(favourites.filter(key => key !== coinKey))\n  }\n\n\n\n  return (\n  <DataContext.Provider value={\n    {\n      page, \n      coinList,\n      setPage, \n      favourites,\n      setFavourites,\n      currFavourite,\n      setCurrFavourite, \n      filteredCoins,\n      setFilteredCoins,\n      addCoin, \n      removeCoin, \n      firstVisit,\n      prices\n    }\n  }>{children}</DataContext.Provider>\n  )\n}"]},"metadata":{},"sourceType":"module"}