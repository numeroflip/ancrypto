{"ast":null,"code":"var _jsxFileName = \"/home/aronberenyi/Code/ancrypto/src/components/Settings/CoinGrid.js\";\nimport React, { useContext } from 'react';\nimport styled from 'styled-components';\nimport { DataContext } from '../contexts';\nimport CoinTile from './CoinTile';\nconst Grid = styled.div`\n    max-width: var(--max-width);\n    margin: var(--xl) auto;\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(200px, .8fr));\n    justify-content: center;\n    grid-gap: 1rem;\n    align-items: center;\n\n`;\n\nfunction getLowerSectionCoins(coinList, filteredCoins) {\n  let sortedKeys = [];\n  Object.keys(coinList).forEach(key => {\n    const sym = Object.keys(coin)[0];\n    const order = +coin[sym][\"SortOrder\"];\n    sortedKeys[order] = coin;\n  });\n  let allLength = Object.keys(coinList).length;\n  return Object.keys(filteredCoins).length > 0 ? Object.keys(filteredCoins).slice(0, 100) : sortedKeys.slice(0, 100);\n}\n\nfunction displayCoins(coinList, topSection, favourites, filteredCoins) {\n  const KeyList = topSection ? favourites : getLowerSectionCoins(coinList, filteredCoins);\n  return KeyList.map((coinKey, i) => {\n    return topSection ? /*#__PURE__*/React.createElement(CoinTile, {\n      topSection: true,\n      remove: true,\n      key: `${coinKey}GZDN`,\n      coinKey: coinKey,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 11\n      }\n    }) : favourites.includes(coinKey) ? /*#__PURE__*/React.createElement(CoinTile, {\n      disabled: true,\n      key: `${coinKey}BRGGD`,\n      coinKey: coinKey,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 15\n      }\n    }) : /*#__PURE__*/React.createElement(CoinTile, {\n      key: `${coinKey}DRMKL`,\n      coinKey: coinKey,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 15\n      }\n    });\n  });\n}\n\nexport default function CoinGrid({\n  topSection\n}) {\n  const {\n    coinList,\n    favourites,\n    filteredCoins\n  } = useContext(DataContext);\n  return /*#__PURE__*/React.createElement(Grid, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, displayCoins(coinList, topSection, favourites, filteredCoins));\n}","map":{"version":3,"sources":["/home/aronberenyi/Code/ancrypto/src/components/Settings/CoinGrid.js"],"names":["React","useContext","styled","DataContext","CoinTile","Grid","div","getLowerSectionCoins","coinList","filteredCoins","sortedKeys","Object","keys","forEach","key","sym","coin","order","allLength","length","slice","displayCoins","topSection","favourites","KeyList","map","coinKey","i","includes","CoinGrid"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,OAAOC,QAAP,MAAqB,YAArB;AAGA,MAAMC,IAAI,GAAGH,MAAM,CAACI,GAAI;;;;;;;;;CAAxB;;AAWA,SAASC,oBAAT,CAA8BC,QAA9B,EAAwCC,aAAxC,EAAuD;AACnD,MAAIC,UAAU,GAAG,EAAjB;AACAC,EAAAA,MAAM,CAACC,IAAP,CAAYJ,QAAZ,EAAsBK,OAAtB,CAA8BC,GAAG,IAAI;AACnC,UAAMC,GAAG,GAAGJ,MAAM,CAACC,IAAP,CAAYI,IAAZ,EAAkB,CAAlB,CAAZ;AACA,UAAMC,KAAK,GAAI,CAACD,IAAI,CAACD,GAAD,CAAJ,CAAU,WAAV,CAAhB;AACAL,IAAAA,UAAU,CAACO,KAAD,CAAV,GAAoBD,IAApB;AACD,GAJD;AAKA,MAAIE,SAAS,GAAGP,MAAM,CAACC,IAAP,CAAYJ,QAAZ,EAAsBW,MAAtC;AACA,SAAQR,MAAM,CAACC,IAAP,CAAYH,aAAZ,EAA2BU,MAA3B,GAAoC,CAArC,GACDR,MAAM,CAACC,IAAP,CAAYH,aAAZ,EAA2BW,KAA3B,CAAiC,CAAjC,EAAoC,GAApC,CADC,GAEDV,UAAU,CAACU,KAAX,CAAiB,CAAjB,EAAoB,GAApB,CAFN;AAGH;;AAED,SAASC,YAAT,CAAsBb,QAAtB,EAAgCc,UAAhC,EAA4CC,UAA5C,EAAwDd,aAAxD,EAAuE;AACnE,QAAMe,OAAO,GAAGF,UAAU,GACpBC,UADoB,GAEpBhB,oBAAoB,CAACC,QAAD,EAAWC,aAAX,CAF1B;AAIA,SAAOe,OAAO,CAACC,GAAR,CAAY,CAACC,OAAD,EAAUC,CAAV,KAAgB;AAE/B,WAAOL,UAAU,gBACf,oBAAC,QAAD;AAAU,MAAA,UAAU,MAApB;AAAqB,MAAA,MAAM,MAA3B;AAA6B,MAAA,GAAG,EAAG,GAAEI,OAAQ,MAA7C;AAAoD,MAAA,OAAO,EAAEA,OAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADe,GAEdH,UAAU,CAACK,QAAX,CAAoBF,OAApB,iBACG,oBAAC,QAAD;AAAU,MAAA,QAAQ,EAAE,IAApB;AAA2B,MAAA,GAAG,EAAG,GAAEA,OAAQ,OAA3C;AAAmD,MAAA,OAAO,EAAEA,OAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,gBAEG,oBAAC,QAAD;AAAU,MAAA,GAAG,EAAG,GAAEA,OAAQ,OAA1B;AAAkC,MAAA,OAAO,EAAEA,OAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJN;AAKH,GAPM,CAAP;AASH;;AAED,eAAe,SAASG,QAAT,CAAkB;AAACP,EAAAA;AAAD,CAAlB,EAAgC;AAE3C,QAAM;AAAEd,IAAAA,QAAF;AAAYe,IAAAA,UAAZ;AAAwBd,IAAAA;AAAxB,MAA0CR,UAAU,CAACE,WAAD,CAA1D;AAEA,sBACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKkB,YAAY,CAAEb,QAAF,EAAYc,UAAZ,EAAwBC,UAAxB,EAAoCd,aAApC,CADjB,CADJ;AAKH","sourcesContent":["import React, { useContext } from 'react'\nimport styled from 'styled-components'\nimport { DataContext } from '../contexts'\nimport CoinTile from './CoinTile'\n\n\nconst Grid = styled.div`\n    max-width: var(--max-width);\n    margin: var(--xl) auto;\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(200px, .8fr));\n    justify-content: center;\n    grid-gap: 1rem;\n    align-items: center;\n\n`\n\nfunction getLowerSectionCoins(coinList, filteredCoins) {\n    let sortedKeys = []\n    Object.keys(coinList).forEach(key => {\n      const sym = Object.keys(coin)[0]\n      const order =  +coin[sym][\"SortOrder\"]\n      sortedKeys[order] = coin;\n    })\n    let allLength = Object.keys(coinList).length;\n    return (Object.keys(filteredCoins).length > 0) \n        ? Object.keys(filteredCoins).slice(0, 100)\n        : sortedKeys.slice(0, 100)\n}\n\nfunction displayCoins(coinList, topSection, favourites, filteredCoins) {\n    const KeyList = topSection \n        ? favourites \n        : getLowerSectionCoins(coinList, filteredCoins)\n\n    return KeyList.map((coinKey, i) => {\n\n        return topSection \n        ? <CoinTile topSection remove  key={`${coinKey}GZDN`} coinKey={coinKey} /> \n        :  favourites.includes(coinKey)\n            ? <CoinTile disabled={true}  key={`${coinKey}BRGGD`} coinKey={coinKey} />\n            : <CoinTile key={`${coinKey}DRMKL`} coinKey={coinKey} />\n    })\n\n}\n\nexport default function CoinGrid({topSection}) {\n\n    const { coinList, favourites, filteredCoins } = useContext(DataContext);\n\n    return (\n        <Grid>\n            {displayCoins( coinList, topSection, favourites, filteredCoins )}\n        </Grid>\n    )\n}"]},"metadata":{},"sourceType":"module"}