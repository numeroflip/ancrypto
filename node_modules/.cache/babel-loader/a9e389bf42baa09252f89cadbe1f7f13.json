{"ast":null,"code":"'use strict';\n/* global fetch */\n\nconst baseUrl = 'https://min-api.cryptocompare.com/data/';\nlet apiKey = '';\n\nfunction setApiKey(userApiKey) {\n  apiKey = userApiKey;\n}\n\nfunction fetchJSON(url) {\n  if (apiKey !== '') {\n    if (url.indexOf('?') > -1) {\n      url += '&api_key=';\n    } else {\n      url += '?api_key=';\n    }\n\n    url += apiKey;\n  }\n\n  return fetch(url).then(res => {\n    if (!res.ok) {\n      throw new Error(`${res.status} ${res.statusText}`);\n    }\n\n    return res.json();\n  }).then(body => {\n    if (body.Response === 'Error') throw body.Message;\n    return body;\n  });\n}\n\nfunction coinList() {\n  const url = `${baseUrl}all/coinlist`;\n  return fetchJSON(url);\n}\n\nfunction exchangeList() {\n  const url = `${baseUrl}all/exchanges`;\n  return fetchJSON(url);\n}\n\nfunction constituentExchangeList(options) {\n  options = options || {};\n  let url = `${baseUrl}all/includedexchanges`;\n  if (options.instrument) url += `?instrument=${options.instrument}`;\n  return fetchJSON(url).then(result => result.Data);\n}\n\nfunction newsFeedsAndCategories() {\n  const url = `${baseUrl}news/feedsandcategories`;\n  return fetchJSON(url).then(result => result.Data);\n}\n\nfunction newsList(lang, options) {\n  options = options || {};\n  let url = `${baseUrl}v2/news/?lang=${lang}`;\n  if (options.feeds) url += `&feeds=${options.feeds}`;\n  if (options.categories) url += `&categories=${options.categories}`;\n  if (options.excludeCategories) url += `&categories=${options.excludeCategories}`;\n\n  if (options.lTs) {\n    options.lTs = dateToTimestamp(options.lTs);\n    url += `&lTs=${options.lTs}`;\n  }\n\n  return fetchJSON(url).then(result => result.Data);\n}\n\nfunction price(fsym, tsyms, options) {\n  options = options || {};\n  let url = `${baseUrl}price?fsym=${fsym}&tsyms=${tsyms}`;\n  if (options.exchanges) url += `&e=${options.exchanges}`;\n  if (options.tryConversion === false) url += '&tryConversion=false';\n  return fetchJSON(url);\n}\n\nfunction priceMulti(fsyms, tsyms, options) {\n  options = options || {};\n  let url = `${baseUrl}pricemulti?fsyms=${fsyms}&tsyms=${tsyms}`;\n  if (options.exchanges) url += `&e=${options.exchanges}`;\n  if (options.tryConversion === false) url += '&tryConversion=false';\n  return fetchJSON(url);\n}\n\nfunction priceFull(fsyms, tsyms, options) {\n  options = options || {};\n  let url = `${baseUrl}pricemultifull?fsyms=${fsyms}&tsyms=${tsyms}`;\n  if (options.exchanges) url += `&e=${options.exchanges}`;\n  if (options.tryConversion === false) url += '&tryConversion=false'; // We want the RAW data, not the DISPLAY data:\n\n  return fetchJSON(url).then(result => result.RAW);\n}\n\nfunction priceHistorical(fsym, tsyms, time, options) {\n  options = options || {};\n  time = dateToTimestamp(time);\n  let url = `${baseUrl}pricehistorical?fsym=${fsym}&tsyms=${tsyms}&ts=${time}`;\n  if (options.exchanges) url += `&e=${options.exchanges}`;\n  if (options.tryConversion === false) url += '&tryConversion=false'; // The API returns json with an extra layer of nesting, so remove it\n\n  return fetchJSON(url).then(result => result[fsym]);\n}\n\nfunction generateAvg(fsym, tsym, e, tryConversion) {\n  let url = `${baseUrl}generateAvg?fsym=${fsym}&tsym=${tsym}&e=${e}`;\n  if (tryConversion === false) url += '&tryConversion=false';\n  return fetchJSON(url).then(result => result.RAW);\n}\n\nfunction topPairs(fsym, limit) {\n  let url = `${baseUrl}top/pairs?fsym=${fsym}`;\n  if (limit) url += `&limit=${limit}`;\n  return fetchJSON(url).then(result => result.Data);\n}\n\nfunction topExchanges(fsym, tsym, limit) {\n  let url = `${baseUrl}top/exchanges?fsym=${fsym}&tsym=${tsym}`;\n  if (limit) url += `&limit=${limit}`;\n  return fetchJSON(url).then(result => result.Data);\n}\n\nfunction topExchangesFull(fsym, tsym, limit) {\n  let url = `${baseUrl}top/exchanges/full?fsym=${fsym}&tsym=${tsym}`;\n  if (limit) url += `&limit=${limit}`;\n  return fetchJSON(url).then(result => result.Data);\n}\n\nfunction histoDay(fsym, tsym, options) {\n  options = options || {};\n  if (options.timestamp) options.timestamp = dateToTimestamp(options.timestamp);\n  let url = `${baseUrl}histoday?fsym=${fsym}&tsym=${tsym}`;\n  if (options.exchange) url += `&e=${options.exchange}`;\n  if (options.limit === 'none') url += '&allData=true';else if (options.limit) url += `&limit=${options.limit}`;\n  if (options.tryConversion === false) url += '&tryConversion=false';\n  if (options.aggregate) url += `&aggregate=${options.aggregate}`;\n  if (options.timestamp) url += `&toTs=${options.timestamp}`;\n  if (options.aggregatePredictableTimePeriods) url += `&aggregatePredictableTimePeriods=${options.aggregatePredictableTimePeriods}`;\n  if (options.allData) url += `&allData=${options.allData}`;\n  if (options.toTs) url += `&toTs=${options.toTs}`;\n  return fetchJSON(url).then(result => result.Data);\n}\n\nfunction histoHour(fsym, tsym, options) {\n  options = options || {};\n  if (options.timestamp) options.timestamp = dateToTimestamp(options.timestamp);\n  let url = `${baseUrl}histohour?fsym=${fsym}&tsym=${tsym}`;\n  if (options.exchange) url += `&e=${options.exchange}`;\n  if (options.limit) url += `&limit=${options.limit}`;\n  if (options.tryConversion === false) url += '&tryConversion=false';\n  if (options.aggregate) url += `&aggregate=${options.aggregate}`;\n  if (options.timestamp) url += `&toTs=${options.timestamp}`;\n  if (options.allData) url += `&allData=${options.allData}`;\n  if (options.toTs) url += `&toTs=${options.toTs}`;\n  return fetchJSON(url).then(result => result.Data);\n}\n\nfunction histoMinute(fsym, tsym, options) {\n  options = options || {};\n  if (options.timestamp) options.timestamp = dateToTimestamp(options.timestamp);\n  let url = `${baseUrl}histominute?fsym=${fsym}&tsym=${tsym}`;\n  if (options.exchange) url += `&e=${options.exchange}`;\n  if (options.limit) url += `&limit=${options.limit}`;\n  if (options.tryConversion === false) url += '&tryConversion=false';\n  if (options.aggregate) url += `&aggregate=${options.aggregate}`;\n  if (options.timestamp) url += `&toTs=${options.timestamp}`;\n  if (options.allData) url += `&allData=${options.allData}`;\n  if (options.toTs) url += `&toTs=${options.toTs}`;\n  return fetchJSON(url).then(result => result.Data);\n}\n\nfunction dateToTimestamp(date) {\n  if (!(date instanceof Date)) throw new Error('timestamp must be an instance of Date.');\n  return Math.floor(date.getTime() / 1000);\n}\n\nfunction latestSocial(options) {\n  options = options || {};\n  let url = `${baseUrl}social/coin/latest`;\n  if (options.coinId) url += `?coinId=${options.coinId}`;\n  return fetchJSON(url).then(result => result.Data);\n}\n\nfunction histoSocial(timePeriod, options) {\n  options = options || {};\n  let url = `${baseUrl}social/coin/histo/${timePeriod === 'hour' ? 'hour' : 'day'}`;\n  let query = [];\n  if (options.coinId) query.push(`coinId=${options.coinId}`);\n  if (options.aggregate >= 1 && options.aggregate <= 30) query.push(`aggregate=${options.aggregate}`);\n  if (options.aggregate && typeof options.aggregatePredictableTimePeriods === 'boolean') query.push(`&aggregatePredictableTimePeriods=${options.aggregatePredictableTimePeriods}`);\n  if (options.limit >= 1 && options.limit <= 2000) query.push(`limit=${options.limit}`);\n  if (options.toTs) query.push(`toTs=${options.toTs}`);\n  return fetchJSON(`${url}${query.length > 0 ? '?' + query.join('&') : ''}`).then(result => result.Data);\n}\n\nmodule.exports = {\n  setApiKey,\n  coinList,\n  constituentExchangeList,\n  exchangeList,\n  newsFeedsAndCategories,\n  newsList,\n  price,\n  priceMulti,\n  priceFull,\n  priceHistorical,\n  generateAvg,\n  topPairs,\n  topExchanges,\n  topExchangesFull,\n  histoDay,\n  histoHour,\n  histoMinute,\n  latestSocial,\n  histoSocial\n};","map":{"version":3,"sources":["/home/aronberenyi/Code/ancrypto/node_modules/cryptocompare/index.js"],"names":["baseUrl","apiKey","setApiKey","userApiKey","fetchJSON","url","indexOf","fetch","then","res","ok","Error","status","statusText","json","body","Response","Message","coinList","exchangeList","constituentExchangeList","options","instrument","result","Data","newsFeedsAndCategories","newsList","lang","feeds","categories","excludeCategories","lTs","dateToTimestamp","price","fsym","tsyms","exchanges","tryConversion","priceMulti","fsyms","priceFull","RAW","priceHistorical","time","generateAvg","tsym","e","topPairs","limit","topExchanges","topExchangesFull","histoDay","timestamp","exchange","aggregate","aggregatePredictableTimePeriods","allData","toTs","histoHour","histoMinute","date","Date","Math","floor","getTime","latestSocial","coinId","histoSocial","timePeriod","query","push","length","join","module","exports"],"mappings":"AAAA;AACA;;AAEA,MAAMA,OAAO,GAAG,yCAAhB;AACA,IAAIC,MAAM,GAAG,EAAb;;AAEA,SAASC,SAAT,CAAoBC,UAApB,EAAgC;AAC9BF,EAAAA,MAAM,GAAGE,UAAT;AACD;;AAED,SAASC,SAAT,CAAoBC,GAApB,EAAyB;AACvB,MAAIJ,MAAM,KAAK,EAAf,EAAmB;AACjB,QAAII,GAAG,CAACC,OAAJ,CAAY,GAAZ,IAAmB,CAAC,CAAxB,EAA2B;AACzBD,MAAAA,GAAG,IAAI,WAAP;AACD,KAFD,MAEO;AACLA,MAAAA,GAAG,IAAI,WAAP;AACD;;AACDA,IAAAA,GAAG,IAAIJ,MAAP;AACD;;AACD,SAAOM,KAAK,CAACF,GAAD,CAAL,CACJG,IADI,CACCC,GAAG,IAAI;AACX,QAAI,CAACA,GAAG,CAACC,EAAT,EAAa;AACX,YAAM,IAAIC,KAAJ,CAAW,GAAEF,GAAG,CAACG,MAAO,IAAGH,GAAG,CAACI,UAAW,EAA1C,CAAN;AACD;;AACD,WAAOJ,GAAG,CAACK,IAAJ,EAAP;AACD,GANI,EAOJN,IAPI,CAOCO,IAAI,IAAI;AACZ,QAAIA,IAAI,CAACC,QAAL,KAAkB,OAAtB,EAA+B,MAAMD,IAAI,CAACE,OAAX;AAC/B,WAAOF,IAAP;AACD,GAVI,CAAP;AAWD;;AAED,SAASG,QAAT,GAAqB;AACnB,QAAMb,GAAG,GAAI,GAAEL,OAAQ,cAAvB;AACA,SAAOI,SAAS,CAACC,GAAD,CAAhB;AACD;;AAED,SAASc,YAAT,GAAyB;AACvB,QAAMd,GAAG,GAAI,GAAEL,OAAQ,eAAvB;AACA,SAAOI,SAAS,CAACC,GAAD,CAAhB;AACD;;AAED,SAASe,uBAAT,CAAkCC,OAAlC,EAA2C;AACzCA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,MAAIhB,GAAG,GAAI,GAAEL,OAAQ,uBAArB;AACA,MAAIqB,OAAO,CAACC,UAAZ,EAAwBjB,GAAG,IAAK,eAAcgB,OAAO,CAACC,UAAW,EAAzC;AACxB,SAAOlB,SAAS,CAACC,GAAD,CAAT,CAAeG,IAAf,CAAoBe,MAAM,IAAIA,MAAM,CAACC,IAArC,CAAP;AACD;;AAED,SAASC,sBAAT,GAAmC;AACjC,QAAMpB,GAAG,GAAI,GAAEL,OAAQ,yBAAvB;AACA,SAAOI,SAAS,CAACC,GAAD,CAAT,CAAeG,IAAf,CAAoBe,MAAM,IAAIA,MAAM,CAACC,IAArC,CAAP;AACD;;AAED,SAASE,QAAT,CAAmBC,IAAnB,EAAyBN,OAAzB,EAAkC;AAChCA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,MAAIhB,GAAG,GAAI,GAAEL,OAAQ,iBAAgB2B,IAAK,EAA1C;AACA,MAAIN,OAAO,CAACO,KAAZ,EAAmBvB,GAAG,IAAK,UAASgB,OAAO,CAACO,KAAM,EAA/B;AACnB,MAAIP,OAAO,CAACQ,UAAZ,EAAwBxB,GAAG,IAAK,eAAcgB,OAAO,CAACQ,UAAW,EAAzC;AACxB,MAAIR,OAAO,CAACS,iBAAZ,EAA+BzB,GAAG,IAAK,eAAcgB,OAAO,CAACS,iBAAkB,EAAhD;;AAC/B,MAAIT,OAAO,CAACU,GAAZ,EAAiB;AACfV,IAAAA,OAAO,CAACU,GAAR,GAAcC,eAAe,CAACX,OAAO,CAACU,GAAT,CAA7B;AACA1B,IAAAA,GAAG,IAAK,QAAOgB,OAAO,CAACU,GAAI,EAA3B;AACD;;AACD,SAAO3B,SAAS,CAACC,GAAD,CAAT,CAAeG,IAAf,CAAoBe,MAAM,IAAIA,MAAM,CAACC,IAArC,CAAP;AACD;;AAED,SAASS,KAAT,CAAgBC,IAAhB,EAAsBC,KAAtB,EAA6Bd,OAA7B,EAAsC;AACpCA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,MAAIhB,GAAG,GAAI,GAAEL,OAAQ,cAAakC,IAAK,UAASC,KAAM,EAAtD;AACA,MAAId,OAAO,CAACe,SAAZ,EAAuB/B,GAAG,IAAK,MAAKgB,OAAO,CAACe,SAAU,EAA/B;AACvB,MAAIf,OAAO,CAACgB,aAAR,KAA0B,KAA9B,EAAqChC,GAAG,IAAI,sBAAP;AACrC,SAAOD,SAAS,CAACC,GAAD,CAAhB;AACD;;AAED,SAASiC,UAAT,CAAqBC,KAArB,EAA4BJ,KAA5B,EAAmCd,OAAnC,EAA4C;AAC1CA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,MAAIhB,GAAG,GAAI,GAAEL,OAAQ,oBAAmBuC,KAAM,UAASJ,KAAM,EAA7D;AACA,MAAId,OAAO,CAACe,SAAZ,EAAuB/B,GAAG,IAAK,MAAKgB,OAAO,CAACe,SAAU,EAA/B;AACvB,MAAIf,OAAO,CAACgB,aAAR,KAA0B,KAA9B,EAAqChC,GAAG,IAAI,sBAAP;AACrC,SAAOD,SAAS,CAACC,GAAD,CAAhB;AACD;;AAED,SAASmC,SAAT,CAAoBD,KAApB,EAA2BJ,KAA3B,EAAkCd,OAAlC,EAA2C;AACzCA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,MAAIhB,GAAG,GAAI,GAAEL,OAAQ,wBAAuBuC,KAAM,UAASJ,KAAM,EAAjE;AACA,MAAId,OAAO,CAACe,SAAZ,EAAuB/B,GAAG,IAAK,MAAKgB,OAAO,CAACe,SAAU,EAA/B;AACvB,MAAIf,OAAO,CAACgB,aAAR,KAA0B,KAA9B,EAAqChC,GAAG,IAAI,sBAAP,CAJI,CAKzC;;AACA,SAAOD,SAAS,CAACC,GAAD,CAAT,CAAeG,IAAf,CAAoBe,MAAM,IAAIA,MAAM,CAACkB,GAArC,CAAP;AACD;;AAED,SAASC,eAAT,CAA0BR,IAA1B,EAAgCC,KAAhC,EAAuCQ,IAAvC,EAA6CtB,OAA7C,EAAsD;AACpDA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACAsB,EAAAA,IAAI,GAAGX,eAAe,CAACW,IAAD,CAAtB;AACA,MAAItC,GAAG,GAAI,GAAEL,OAAQ,wBAAuBkC,IAAK,UAASC,KAAM,OAAMQ,IAAK,EAA3E;AACA,MAAItB,OAAO,CAACe,SAAZ,EAAuB/B,GAAG,IAAK,MAAKgB,OAAO,CAACe,SAAU,EAA/B;AACvB,MAAIf,OAAO,CAACgB,aAAR,KAA0B,KAA9B,EAAqChC,GAAG,IAAI,sBAAP,CALe,CAMpD;;AACA,SAAOD,SAAS,CAACC,GAAD,CAAT,CAAeG,IAAf,CAAoBe,MAAM,IAAIA,MAAM,CAACW,IAAD,CAApC,CAAP;AACD;;AAED,SAASU,WAAT,CAAsBV,IAAtB,EAA4BW,IAA5B,EAAkCC,CAAlC,EAAqCT,aAArC,EAAoD;AAClD,MAAIhC,GAAG,GAAI,GAAEL,OAAQ,oBAAmBkC,IAAK,SAAQW,IAAK,MAAKC,CAAE,EAAjE;AACA,MAAIT,aAAa,KAAK,KAAtB,EAA6BhC,GAAG,IAAI,sBAAP;AAC7B,SAAOD,SAAS,CAACC,GAAD,CAAT,CAAeG,IAAf,CAAoBe,MAAM,IAAIA,MAAM,CAACkB,GAArC,CAAP;AACD;;AAED,SAASM,QAAT,CAAmBb,IAAnB,EAAyBc,KAAzB,EAAgC;AAC9B,MAAI3C,GAAG,GAAI,GAAEL,OAAQ,kBAAiBkC,IAAK,EAA3C;AACA,MAAIc,KAAJ,EAAW3C,GAAG,IAAK,UAAS2C,KAAM,EAAvB;AACX,SAAO5C,SAAS,CAACC,GAAD,CAAT,CAAeG,IAAf,CAAoBe,MAAM,IAAIA,MAAM,CAACC,IAArC,CAAP;AACD;;AAED,SAASyB,YAAT,CAAuBf,IAAvB,EAA6BW,IAA7B,EAAmCG,KAAnC,EAA0C;AACxC,MAAI3C,GAAG,GAAI,GAAEL,OAAQ,sBAAqBkC,IAAK,SAAQW,IAAK,EAA5D;AACA,MAAIG,KAAJ,EAAW3C,GAAG,IAAK,UAAS2C,KAAM,EAAvB;AACX,SAAO5C,SAAS,CAACC,GAAD,CAAT,CAAeG,IAAf,CAAoBe,MAAM,IAAIA,MAAM,CAACC,IAArC,CAAP;AACD;;AAED,SAAS0B,gBAAT,CAA2BhB,IAA3B,EAAiCW,IAAjC,EAAuCG,KAAvC,EAA8C;AAC5C,MAAI3C,GAAG,GAAI,GAAEL,OAAQ,2BAA0BkC,IAAK,SAAQW,IAAK,EAAjE;AACA,MAAIG,KAAJ,EAAW3C,GAAG,IAAK,UAAS2C,KAAM,EAAvB;AACX,SAAO5C,SAAS,CAACC,GAAD,CAAT,CAAeG,IAAf,CAAoBe,MAAM,IAAIA,MAAM,CAACC,IAArC,CAAP;AACD;;AAED,SAAS2B,QAAT,CAAmBjB,IAAnB,EAAyBW,IAAzB,EAA+BxB,OAA/B,EAAwC;AACtCA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,MAAIA,OAAO,CAAC+B,SAAZ,EAAuB/B,OAAO,CAAC+B,SAAR,GAAoBpB,eAAe,CAACX,OAAO,CAAC+B,SAAT,CAAnC;AACvB,MAAI/C,GAAG,GAAI,GAAEL,OAAQ,iBAAgBkC,IAAK,SAAQW,IAAK,EAAvD;AACA,MAAIxB,OAAO,CAACgC,QAAZ,EAAsBhD,GAAG,IAAK,MAAKgB,OAAO,CAACgC,QAAS,EAA9B;AACtB,MAAIhC,OAAO,CAAC2B,KAAR,KAAkB,MAAtB,EAA8B3C,GAAG,IAAI,eAAP,CAA9B,KACK,IAAIgB,OAAO,CAAC2B,KAAZ,EAAmB3C,GAAG,IAAK,UAASgB,OAAO,CAAC2B,KAAM,EAA/B;AACxB,MAAI3B,OAAO,CAACgB,aAAR,KAA0B,KAA9B,EAAqChC,GAAG,IAAI,sBAAP;AACrC,MAAIgB,OAAO,CAACiC,SAAZ,EAAuBjD,GAAG,IAAK,cAAagB,OAAO,CAACiC,SAAU,EAAvC;AACvB,MAAIjC,OAAO,CAAC+B,SAAZ,EAAuB/C,GAAG,IAAK,SAAQgB,OAAO,CAAC+B,SAAU,EAAlC;AACvB,MAAI/B,OAAO,CAACkC,+BAAZ,EAA6ClD,GAAG,IAAK,oCAAmCgB,OAAO,CAACkC,+BAAgC,EAAnF;AAC7C,MAAIlC,OAAO,CAACmC,OAAZ,EAAqBnD,GAAG,IAAK,YAAWgB,OAAO,CAACmC,OAAQ,EAAnC;AACrB,MAAInC,OAAO,CAACoC,IAAZ,EAAkBpD,GAAG,IAAK,SAAQgB,OAAO,CAACoC,IAAK,EAA7B;AAClB,SAAOrD,SAAS,CAACC,GAAD,CAAT,CAAeG,IAAf,CAAoBe,MAAM,IAAIA,MAAM,CAACC,IAArC,CAAP;AACD;;AAED,SAASkC,SAAT,CAAoBxB,IAApB,EAA0BW,IAA1B,EAAgCxB,OAAhC,EAAyC;AACvCA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,MAAIA,OAAO,CAAC+B,SAAZ,EAAuB/B,OAAO,CAAC+B,SAAR,GAAoBpB,eAAe,CAACX,OAAO,CAAC+B,SAAT,CAAnC;AACvB,MAAI/C,GAAG,GAAI,GAAEL,OAAQ,kBAAiBkC,IAAK,SAAQW,IAAK,EAAxD;AACA,MAAIxB,OAAO,CAACgC,QAAZ,EAAsBhD,GAAG,IAAK,MAAKgB,OAAO,CAACgC,QAAS,EAA9B;AACtB,MAAIhC,OAAO,CAAC2B,KAAZ,EAAmB3C,GAAG,IAAK,UAASgB,OAAO,CAAC2B,KAAM,EAA/B;AACnB,MAAI3B,OAAO,CAACgB,aAAR,KAA0B,KAA9B,EAAqChC,GAAG,IAAI,sBAAP;AACrC,MAAIgB,OAAO,CAACiC,SAAZ,EAAuBjD,GAAG,IAAK,cAAagB,OAAO,CAACiC,SAAU,EAAvC;AACvB,MAAIjC,OAAO,CAAC+B,SAAZ,EAAuB/C,GAAG,IAAK,SAAQgB,OAAO,CAAC+B,SAAU,EAAlC;AACvB,MAAI/B,OAAO,CAACmC,OAAZ,EAAqBnD,GAAG,IAAK,YAAWgB,OAAO,CAACmC,OAAQ,EAAnC;AACrB,MAAInC,OAAO,CAACoC,IAAZ,EAAkBpD,GAAG,IAAK,SAAQgB,OAAO,CAACoC,IAAK,EAA7B;AAClB,SAAOrD,SAAS,CAACC,GAAD,CAAT,CAAeG,IAAf,CAAoBe,MAAM,IAAIA,MAAM,CAACC,IAArC,CAAP;AACD;;AAED,SAASmC,WAAT,CAAsBzB,IAAtB,EAA4BW,IAA5B,EAAkCxB,OAAlC,EAA2C;AACzCA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,MAAIA,OAAO,CAAC+B,SAAZ,EAAuB/B,OAAO,CAAC+B,SAAR,GAAoBpB,eAAe,CAACX,OAAO,CAAC+B,SAAT,CAAnC;AACvB,MAAI/C,GAAG,GAAI,GAAEL,OAAQ,oBAAmBkC,IAAK,SAAQW,IAAK,EAA1D;AACA,MAAIxB,OAAO,CAACgC,QAAZ,EAAsBhD,GAAG,IAAK,MAAKgB,OAAO,CAACgC,QAAS,EAA9B;AACtB,MAAIhC,OAAO,CAAC2B,KAAZ,EAAmB3C,GAAG,IAAK,UAASgB,OAAO,CAAC2B,KAAM,EAA/B;AACnB,MAAI3B,OAAO,CAACgB,aAAR,KAA0B,KAA9B,EAAqChC,GAAG,IAAI,sBAAP;AACrC,MAAIgB,OAAO,CAACiC,SAAZ,EAAuBjD,GAAG,IAAK,cAAagB,OAAO,CAACiC,SAAU,EAAvC;AACvB,MAAIjC,OAAO,CAAC+B,SAAZ,EAAuB/C,GAAG,IAAK,SAAQgB,OAAO,CAAC+B,SAAU,EAAlC;AACvB,MAAI/B,OAAO,CAACmC,OAAZ,EAAqBnD,GAAG,IAAK,YAAWgB,OAAO,CAACmC,OAAQ,EAAnC;AACrB,MAAInC,OAAO,CAACoC,IAAZ,EAAkBpD,GAAG,IAAK,SAAQgB,OAAO,CAACoC,IAAK,EAA7B;AAClB,SAAOrD,SAAS,CAACC,GAAD,CAAT,CAAeG,IAAf,CAAoBe,MAAM,IAAIA,MAAM,CAACC,IAArC,CAAP;AACD;;AAED,SAASQ,eAAT,CAA0B4B,IAA1B,EAAgC;AAC9B,MAAI,EAAEA,IAAI,YAAYC,IAAlB,CAAJ,EAA6B,MAAM,IAAIlD,KAAJ,CAAU,wCAAV,CAAN;AAC7B,SAAOmD,IAAI,CAACC,KAAL,CAAWH,IAAI,CAACI,OAAL,KAAiB,IAA5B,CAAP;AACD;;AAED,SAASC,YAAT,CAAuB5C,OAAvB,EAAgC;AAC9BA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,MAAIhB,GAAG,GAAI,GAAEL,OAAQ,oBAArB;AACA,MAAIqB,OAAO,CAAC6C,MAAZ,EAAoB7D,GAAG,IAAK,WAAUgB,OAAO,CAAC6C,MAAO,EAAjC;AACpB,SAAO9D,SAAS,CAACC,GAAD,CAAT,CAAeG,IAAf,CAAoBe,MAAM,IAAIA,MAAM,CAACC,IAArC,CAAP;AACD;;AAED,SAAS2C,WAAT,CAAsBC,UAAtB,EAAkC/C,OAAlC,EAA2C;AACzCA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,MAAIhB,GAAG,GAAI,GAAEL,OAAQ,qBAAoBoE,UAAU,KAAK,MAAf,GAAwB,MAAxB,GAAiC,KAAM,EAAhF;AACA,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIhD,OAAO,CAAC6C,MAAZ,EAAoBG,KAAK,CAACC,IAAN,CAAY,UAASjD,OAAO,CAAC6C,MAAO,EAApC;AACpB,MAAI7C,OAAO,CAACiC,SAAR,IAAqB,CAArB,IAA0BjC,OAAO,CAACiC,SAAR,IAAqB,EAAnD,EAAuDe,KAAK,CAACC,IAAN,CAAY,aAAYjD,OAAO,CAACiC,SAAU,EAA1C;AACvD,MAAIjC,OAAO,CAACiC,SAAR,IAAqB,OAAOjC,OAAO,CAACkC,+BAAf,KAAmD,SAA5E,EAAuFc,KAAK,CAACC,IAAN,CAAY,oCAAmCjD,OAAO,CAACkC,+BAAgC,EAAvF;AACvF,MAAIlC,OAAO,CAAC2B,KAAR,IAAiB,CAAjB,IAAsB3B,OAAO,CAAC2B,KAAR,IAAiB,IAA3C,EAAiDqB,KAAK,CAACC,IAAN,CAAY,SAAQjD,OAAO,CAAC2B,KAAM,EAAlC;AACjD,MAAI3B,OAAO,CAACoC,IAAZ,EAAkBY,KAAK,CAACC,IAAN,CAAY,QAAOjD,OAAO,CAACoC,IAAK,EAAhC;AAClB,SAAOrD,SAAS,CAAE,GAAEC,GAAI,GAAEgE,KAAK,CAACE,MAAN,GAAe,CAAf,GAAmB,MAAMF,KAAK,CAACG,IAAN,CAAW,GAAX,CAAzB,GAA2C,EAAG,EAAxD,CAAT,CAAoEhE,IAApE,CAAyEe,MAAM,IAAIA,MAAM,CAACC,IAA1F,CAAP;AACD;;AAEDiD,MAAM,CAACC,OAAP,GAAiB;AACfxE,EAAAA,SADe;AAEfgB,EAAAA,QAFe;AAGfE,EAAAA,uBAHe;AAIfD,EAAAA,YAJe;AAKfM,EAAAA,sBALe;AAMfC,EAAAA,QANe;AAOfO,EAAAA,KAPe;AAQfK,EAAAA,UARe;AASfE,EAAAA,SATe;AAUfE,EAAAA,eAVe;AAWfE,EAAAA,WAXe;AAYfG,EAAAA,QAZe;AAafE,EAAAA,YAbe;AAcfC,EAAAA,gBAde;AAefC,EAAAA,QAfe;AAgBfO,EAAAA,SAhBe;AAiBfC,EAAAA,WAjBe;AAkBfM,EAAAA,YAlBe;AAmBfE,EAAAA;AAnBe,CAAjB","sourcesContent":["'use strict'\n/* global fetch */\n\nconst baseUrl = 'https://min-api.cryptocompare.com/data/'\nlet apiKey = ''\n\nfunction setApiKey (userApiKey) {\n  apiKey = userApiKey\n}\n\nfunction fetchJSON (url) {\n  if (apiKey !== '') {\n    if (url.indexOf('?') > -1) {\n      url += '&api_key='\n    } else {\n      url += '?api_key='\n    }\n    url += apiKey\n  }\n  return fetch(url)\n    .then(res => {\n      if (!res.ok) {\n        throw new Error(`${res.status} ${res.statusText}`)\n      }\n      return res.json()\n    })\n    .then(body => {\n      if (body.Response === 'Error') throw body.Message\n      return body\n    })\n}\n\nfunction coinList () {\n  const url = `${baseUrl}all/coinlist`\n  return fetchJSON(url)\n}\n\nfunction exchangeList () {\n  const url = `${baseUrl}all/exchanges`\n  return fetchJSON(url)\n}\n\nfunction constituentExchangeList (options) {\n  options = options || {}\n  let url = `${baseUrl}all/includedexchanges`\n  if (options.instrument) url += `?instrument=${options.instrument}`\n  return fetchJSON(url).then(result => result.Data)\n}\n\nfunction newsFeedsAndCategories () {\n  const url = `${baseUrl}news/feedsandcategories`\n  return fetchJSON(url).then(result => result.Data)\n}\n\nfunction newsList (lang, options) {\n  options = options || {}\n  let url = `${baseUrl}v2/news/?lang=${lang}`\n  if (options.feeds) url += `&feeds=${options.feeds}`\n  if (options.categories) url += `&categories=${options.categories}`\n  if (options.excludeCategories) url += `&categories=${options.excludeCategories}`\n  if (options.lTs) {\n    options.lTs = dateToTimestamp(options.lTs)\n    url += `&lTs=${options.lTs}`\n  }\n  return fetchJSON(url).then(result => result.Data)\n}\n\nfunction price (fsym, tsyms, options) {\n  options = options || {}\n  let url = `${baseUrl}price?fsym=${fsym}&tsyms=${tsyms}`\n  if (options.exchanges) url += `&e=${options.exchanges}`\n  if (options.tryConversion === false) url += '&tryConversion=false'\n  return fetchJSON(url)\n}\n\nfunction priceMulti (fsyms, tsyms, options) {\n  options = options || {}\n  let url = `${baseUrl}pricemulti?fsyms=${fsyms}&tsyms=${tsyms}`\n  if (options.exchanges) url += `&e=${options.exchanges}`\n  if (options.tryConversion === false) url += '&tryConversion=false'\n  return fetchJSON(url)\n}\n\nfunction priceFull (fsyms, tsyms, options) {\n  options = options || {}\n  let url = `${baseUrl}pricemultifull?fsyms=${fsyms}&tsyms=${tsyms}`\n  if (options.exchanges) url += `&e=${options.exchanges}`\n  if (options.tryConversion === false) url += '&tryConversion=false'\n  // We want the RAW data, not the DISPLAY data:\n  return fetchJSON(url).then(result => result.RAW)\n}\n\nfunction priceHistorical (fsym, tsyms, time, options) {\n  options = options || {}\n  time = dateToTimestamp(time)\n  let url = `${baseUrl}pricehistorical?fsym=${fsym}&tsyms=${tsyms}&ts=${time}`\n  if (options.exchanges) url += `&e=${options.exchanges}`\n  if (options.tryConversion === false) url += '&tryConversion=false'\n  // The API returns json with an extra layer of nesting, so remove it\n  return fetchJSON(url).then(result => result[fsym])\n}\n\nfunction generateAvg (fsym, tsym, e, tryConversion) {\n  let url = `${baseUrl}generateAvg?fsym=${fsym}&tsym=${tsym}&e=${e}`\n  if (tryConversion === false) url += '&tryConversion=false'\n  return fetchJSON(url).then(result => result.RAW)\n}\n\nfunction topPairs (fsym, limit) {\n  let url = `${baseUrl}top/pairs?fsym=${fsym}`\n  if (limit) url += `&limit=${limit}`\n  return fetchJSON(url).then(result => result.Data)\n}\n\nfunction topExchanges (fsym, tsym, limit) {\n  let url = `${baseUrl}top/exchanges?fsym=${fsym}&tsym=${tsym}`\n  if (limit) url += `&limit=${limit}`\n  return fetchJSON(url).then(result => result.Data)\n}\n\nfunction topExchangesFull (fsym, tsym, limit) {\n  let url = `${baseUrl}top/exchanges/full?fsym=${fsym}&tsym=${tsym}`\n  if (limit) url += `&limit=${limit}`\n  return fetchJSON(url).then(result => result.Data)\n}\n\nfunction histoDay (fsym, tsym, options) {\n  options = options || {}\n  if (options.timestamp) options.timestamp = dateToTimestamp(options.timestamp)\n  let url = `${baseUrl}histoday?fsym=${fsym}&tsym=${tsym}`\n  if (options.exchange) url += `&e=${options.exchange}`\n  if (options.limit === 'none') url += '&allData=true'\n  else if (options.limit) url += `&limit=${options.limit}`\n  if (options.tryConversion === false) url += '&tryConversion=false'\n  if (options.aggregate) url += `&aggregate=${options.aggregate}`\n  if (options.timestamp) url += `&toTs=${options.timestamp}`\n  if (options.aggregatePredictableTimePeriods) url += `&aggregatePredictableTimePeriods=${options.aggregatePredictableTimePeriods}`\n  if (options.allData) url += `&allData=${options.allData}`\n  if (options.toTs) url += `&toTs=${options.toTs}`\n  return fetchJSON(url).then(result => result.Data)\n}\n\nfunction histoHour (fsym, tsym, options) {\n  options = options || {}\n  if (options.timestamp) options.timestamp = dateToTimestamp(options.timestamp)\n  let url = `${baseUrl}histohour?fsym=${fsym}&tsym=${tsym}`\n  if (options.exchange) url += `&e=${options.exchange}`\n  if (options.limit) url += `&limit=${options.limit}`\n  if (options.tryConversion === false) url += '&tryConversion=false'\n  if (options.aggregate) url += `&aggregate=${options.aggregate}`\n  if (options.timestamp) url += `&toTs=${options.timestamp}`\n  if (options.allData) url += `&allData=${options.allData}`\n  if (options.toTs) url += `&toTs=${options.toTs}`\n  return fetchJSON(url).then(result => result.Data)\n}\n\nfunction histoMinute (fsym, tsym, options) {\n  options = options || {}\n  if (options.timestamp) options.timestamp = dateToTimestamp(options.timestamp)\n  let url = `${baseUrl}histominute?fsym=${fsym}&tsym=${tsym}`\n  if (options.exchange) url += `&e=${options.exchange}`\n  if (options.limit) url += `&limit=${options.limit}`\n  if (options.tryConversion === false) url += '&tryConversion=false'\n  if (options.aggregate) url += `&aggregate=${options.aggregate}`\n  if (options.timestamp) url += `&toTs=${options.timestamp}`\n  if (options.allData) url += `&allData=${options.allData}`\n  if (options.toTs) url += `&toTs=${options.toTs}`\n  return fetchJSON(url).then(result => result.Data)\n}\n\nfunction dateToTimestamp (date) {\n  if (!(date instanceof Date)) throw new Error('timestamp must be an instance of Date.')\n  return Math.floor(date.getTime() / 1000)\n}\n\nfunction latestSocial (options) {\n  options = options || {}\n  let url = `${baseUrl}social/coin/latest`\n  if (options.coinId) url += `?coinId=${options.coinId}`\n  return fetchJSON(url).then(result => result.Data)\n}\n\nfunction histoSocial (timePeriod, options) {\n  options = options || {}\n  let url = `${baseUrl}social/coin/histo/${timePeriod === 'hour' ? 'hour' : 'day'}`\n  let query = []\n  if (options.coinId) query.push(`coinId=${options.coinId}`)\n  if (options.aggregate >= 1 && options.aggregate <= 30) query.push(`aggregate=${options.aggregate}`)\n  if (options.aggregate && typeof options.aggregatePredictableTimePeriods === 'boolean') query.push(`&aggregatePredictableTimePeriods=${options.aggregatePredictableTimePeriods}`)\n  if (options.limit >= 1 && options.limit <= 2000) query.push(`limit=${options.limit}`)\n  if (options.toTs) query.push(`toTs=${options.toTs}`)\n  return fetchJSON(`${url}${query.length > 0 ? '?' + query.join('&') : ''}`).then(result => result.Data)\n}\n\nmodule.exports = {\n  setApiKey,\n  coinList,\n  constituentExchangeList,\n  exchangeList,\n  newsFeedsAndCategories,\n  newsList,\n  price,\n  priceMulti,\n  priceFull,\n  priceHistorical,\n  generateAvg,\n  topPairs,\n  topExchanges,\n  topExchangesFull,\n  histoDay,\n  histoHour,\n  histoMinute,\n  latestSocial,\n  histoSocial\n}\n"]},"metadata":{},"sourceType":"script"}