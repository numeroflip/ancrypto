{"ast":null,"code":"var _jsxFileName = \"/home/aronberenyi/Code/ancrypto/src/components/contexts/DataContext.js\";\nimport React, { useState, useEffect } from 'react';\nimport cc from 'cryptocompare';\ncc.setApiKey('6bce00cebd36b06c07f20e0e94c2a0fe1b0211dc0a8a8dc030f6fb8b4117f707');\nconst MAX_FAVOURITES = 10;\nexport const DataContext = React.createContext();\nexport const DataProvider = ({\n  children\n}) => {\n  // ==============STATE========================\n  const [page, setPage] = useState('dashboard');\n  const [firstVisit, setFirstVisit] = useState(localStorage.getItem('ancrypto') ? false : true);\n  const [favourites, setFavourites] = useState(firstVisit ? [] : getFavsFromLocal());\n  const [coinList, setCoinList] = useState(null);\n  const [filteredCoins, setFilteredCoins] = useState([]);\n  const [prices, setPrices] = useState([]);\n  console.log('prices', prices);\n\n  function getFavsFromLocal() {\n    let data = JSON.parse(localStorage.getItem('ancrypto'));\n    let favs = data.favourites;\n    return favs ? favs : [];\n  }\n\n  const addCoin = coinKey => {\n    if (favourites.length < MAX_FAVOURITES && !favourites.includes(coinKey)) {\n      setFavourites([...favourites, coinKey]);\n    }\n  };\n\n  const updateFavsInLocalStorage = favourites => {\n    localStorage.setItem('ancrypto', JSON.stringify({\n      favourites\n    }));\n  }; // Write favourites into localstorage\n\n\n  useEffect(() => updateFavsInLocalStorage(favourites), [favourites]); // Fetch Coin data at startup\n\n  useEffect(() => {\n    const fetchCoins = async () => {\n      let coins = await cc.coinList();\n      coins = coins.Data;\n\n      try {\n        return coins;\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    const updateStateWithCoins = async () => {\n      const coins = await fetchCoins();\n      setCoinList(coins);\n    };\n\n    updateStateWithCoins();\n  }, []); // Fetch the pices of favourites\n\n  useEffect(() => {\n    const fetchPrices = async coinsArr => {\n      try {\n        const returnData = [];\n        coinsArr.forEach(async coin => {\n          try {\n            let priceData = await cc.priceFull(coin, 'USD');\n            returnData.push(priceData);\n          } catch (e) {\n            console.error('Fetch price error: ', e);\n          }\n        });\n        console.log('priceArray: ', returnData);\n        return returnData;\n      } catch (e) {\n        console.error('Fetch price error: ', e);\n      }\n    };\n\n    const updatePrices = async coinsArr => {\n      let newPrices = await fetchPrices(coinsArr);\n      console.log('DA PRICES: ', newPrices);\n      newPrices.forEach(obj => {\n        console.log('DANGARANGA');\n      });\n      setPrices(prices);\n    };\n\n    updatePrices(favourites);\n  }, [favourites]);\n\n  const isInFavourites = coinKey => {\n    return favourites.includes(coinKey);\n  };\n\n  const removeCoin = coinKey => {\n    setFavourites(favourites.filter(key => key !== coinKey));\n  };\n\n  return /*#__PURE__*/React.createElement(DataContext.Provider, {\n    value: {\n      page,\n      coinList,\n      setPage,\n      favourites,\n      isInFavourites,\n      setFavourites,\n      filteredCoins,\n      setFilteredCoins,\n      addCoin,\n      removeCoin,\n      firstVisit,\n      prices\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  }, children);\n};","map":{"version":3,"sources":["/home/aronberenyi/Code/ancrypto/src/components/contexts/DataContext.js"],"names":["React","useState","useEffect","cc","setApiKey","MAX_FAVOURITES","DataContext","createContext","DataProvider","children","page","setPage","firstVisit","setFirstVisit","localStorage","getItem","favourites","setFavourites","getFavsFromLocal","coinList","setCoinList","filteredCoins","setFilteredCoins","prices","setPrices","console","log","data","JSON","parse","favs","addCoin","coinKey","length","includes","updateFavsInLocalStorage","setItem","stringify","fetchCoins","coins","Data","e","updateStateWithCoins","fetchPrices","coinsArr","returnData","forEach","coin","priceData","priceFull","push","error","updatePrices","newPrices","obj","isInFavourites","removeCoin","filter","key"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport cc from 'cryptocompare'\n\n\ncc.setApiKey('6bce00cebd36b06c07f20e0e94c2a0fe1b0211dc0a8a8dc030f6fb8b4117f707')\n\nconst MAX_FAVOURITES = 10;\n\nexport const DataContext = React.createContext();\n\n\n\nexport const DataProvider = ({children}) => {\n\n    // ==============STATE========================\n    const [page, setPage] = useState('dashboard');\n    const [firstVisit, setFirstVisit] = useState(localStorage.getItem('ancrypto') ? false : true)\n    const [favourites, setFavourites] = useState(firstVisit ? [] : getFavsFromLocal());\n    const [coinList, setCoinList] = useState(null)\n    const [filteredCoins, setFilteredCoins] = useState([])\n    const [prices, setPrices] = useState([]);\n    console.log('prices', prices)\n\n    function getFavsFromLocal() {\n        let data = JSON.parse(localStorage.getItem('ancrypto'))\n        let favs = data.favourites;\n        return favs ? favs : []\n    }\n    \n\n    \n  \n\n    \n\n\n    const addCoin = coinKey => {\n        if((favourites.length < MAX_FAVOURITES ) && !favourites.includes(coinKey)) {\n            setFavourites([...favourites, coinKey]);\n        }\n    }\n    const updateFavsInLocalStorage = (favourites) => {\n        localStorage.setItem('ancrypto', JSON.stringify({favourites}))\n    }\n\n    // Write favourites into localstorage\n    useEffect(() => updateFavsInLocalStorage(favourites), [favourites])\n\n    // Fetch Coin data at startup\n    useEffect(() => {\n        const fetchCoins = async () => {\n          let coins = await cc.coinList()\n          coins = coins.Data\n          try {return coins}\n          catch(e) {console.log(e)}\n      }\n        const updateStateWithCoins = async () => {\n            const coins = await fetchCoins()\n            setCoinList(coins)\n        }\n    \n        updateStateWithCoins()\n    \n      }, [])\n\n    // Fetch the pices of favourites\n    useEffect(() => {\n        \n        const fetchPrices = async (coinsArr) => {\n            try {\n                const returnData = [];\n                coinsArr.forEach(async (coin) => {\n                    try {\n                        let priceData = await cc.priceFull(coin, 'USD');\n                        returnData.push(priceData)\n                    } catch(e) { console.error('Fetch price error: ', e) }\n                })\n                console.log('priceArray: ', returnData)\n                return returnData\n            } catch (e) { console.error('Fetch price error: ', e)}\n        }\n        const updatePrices = async (coinsArr) => {\n            let newPrices = await fetchPrices(coinsArr)\n            console.log('DA PRICES: ', newPrices)\n            newPrices.forEach(obj => {console.log('DANGARANGA')})\n            setPrices(prices)\n        }\n        updatePrices(favourites) \n    },[favourites])\n\n\n\n    const isInFavourites = (coinKey) => {\n        return favourites.includes(coinKey)\n    } \n\n    const removeCoin = coinKey => {\n        setFavourites(favourites.filter(key => key !== coinKey))\n    }\n\n    return (\n    <DataContext.Provider value={\n        {\n            page, \n            coinList,\n            setPage, \n            favourites,\n            isInFavourites,\n            setFavourites, \n            filteredCoins,\n            setFilteredCoins,\n            addCoin, \n            removeCoin, \n            firstVisit,\n            prices\n        }\n    }>{children}</DataContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}