{"ast":null,"code":"var _jsxFileName = \"/home/aronberenyi/Code/ancrypto/src/components/contexts/DataContext.js\";\nimport React, { useState, useEffect } from 'react';\nimport cc from 'cryptocompare';\nimport moment from 'moment';\ncc.setApiKey('6bce00cebd36b06c07f20e0e94c2a0fe1b0211dc0a8a8dc030f6fb8b4117f707');\nconst MAX_FAVOURITES = 10;\nconst TIME_UNITS = 10;\nexport const DataContext = React.createContext();\n\nfunction getCurrFavourite(favourites) {\n  let currFavInLocal = getFromLocal('currFavourite');\n\n  if (currFavInLocal) {\n    return currFavInLocal;\n  } else if (favourites) {\n    return favourites[0];\n  } else return null;\n}\n\nfunction getFromLocal(item) {\n  let data = JSON.parse(localStorage.getItem('ancrypto'));\n  let answer = data ? data[item] : [];\n  return answer;\n}\n\nconst fetchPrices = async coinsArr => {\n  const returnData = [];\n  coinsArr.forEach(async coin => {\n    try {\n      let priceData = await cc.priceFull(coin, 'USD');\n      returnData.push(priceData);\n    } catch (e) {\n      console.error('Fetch price error: ', e);\n    }\n  });\n  return returnData;\n};\n\nconst fetchCoins = async () => {\n  let coins = await cc.coinList();\n  coins = coins.Data;\n\n  try {\n    return coins;\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nconst historicalPromises = (currFavourite, interval) => {\n  let promises = [];\n\n  for (let i = TIME_UNITS; i > 0; i--) {\n    const date = moment().subtract(i, interval).toDate();\n    promises.push(cc.priceHistorical(currFavourite, ['USD'], date));\n  }\n\n  return Promise.all(promises);\n};\n\nconst fetchHistorical = async (currFavourite, interval) => {\n  const results = await historicalPromises(currFavourite, interval);\n  const historical = [{\n    name: currFavourite,\n    data: results.map((ticker, index) => [moment().subtract(TIME_UNITS - index, interval).valueOf(), ticker.USD])\n  }];\n  return historical;\n};\n\nexport const DataProvider = ({\n  children\n}) => {\n  // ==============STATE========================\n  const [page, setPage] = useState('dashboard');\n  const [firstVisit, setFirstVisit] = useState(localStorage.getItem('ancrypto') ? false : true);\n  const [favourites, setFavourites] = useState(firstVisit ? [] : getFromLocal('favourites'));\n  const [currFavourite, setCurrFavourite] = useState(getCurrFavourite());\n  const [coinList, setCoinList] = useState(null);\n  const [filteredCoins, setFilteredCoins] = useState([]);\n  const [prices, setPrices] = useState(null);\n  const [historicalData, setHistoricalData] = useState([]);\n  const [historicalInterval, setHistoricalInterval] = useState(\"months\"); // Fetch Coin data at startup\n\n  useEffect(() => {\n    const init = async () => {\n      const coins = await fetchCoins();\n\n      if (currFavourite.length > 0) {\n        const historical = await fetchHistorical(currFavourite, historicalInterval);\n        setHistoricalData(historical);\n      }\n\n      setCoinList(coins);\n    };\n\n    init();\n  }, []); // Fetch the pices of favourites\n\n  useEffect(() => {\n    const updatePrices = async coinsArr => {\n      let newPrices = await fetchPrices(coinsArr);\n      setPrices(newPrices);\n    };\n\n    updatePrices(favourites);\n  }, [favourites]);\n\n  const addCoin = coinKey => {\n    if (currFavourite.length === 0) {\n      setCurrFavourite(coinKey);\n    }\n\n    if (favourites.length < MAX_FAVOURITES && !favourites.includes(coinKey)) {\n      setFavourites([...favourites, coinKey]);\n    }\n  };\n\n  useEffect(() => {\n    const updateHistoricalPrice = async () => {\n      if (currFavourite) {\n        const historical = await fetchHistorical(currFavourite, historicalInterval);\n        setHistoricalData(historical);\n      }\n    };\n\n    setHistoricalData(null);\n    updateHistoricalPrice();\n  }, [currFavourite, historicalInterval]); // Handle localstorage updates\n\n  useEffect(() => {\n    localStorage.setItem('ancrypto', JSON.stringify({\n      favourites,\n      currFavourite\n    }));\n  }, [currFavourite, favourites]);\n\n  const removeCoin = coinKey => {\n    const updatedFavs = favourites.filter(key => key !== coinKey);\n\n    if (favourites.includes(coinKey)) {\n      console.log(true, favourites, coinKey);\n      setCurrFavourite(updatedFavs[0]);\n    }\n\n    setFavourites(updatedFavs);\n  };\n\n  return /*#__PURE__*/React.createElement(DataContext.Provider, {\n    value: {\n      page,\n      coinList,\n      setPage,\n      historicalData,\n      favourites,\n      setFavourites,\n      historicalInterval,\n      setHistoricalInterval,\n      currFavourite,\n      setCurrFavourite,\n      filteredCoins,\n      setFilteredCoins,\n      addCoin,\n      removeCoin,\n      firstVisit,\n      prices\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 3\n    }\n  }, children);\n};","map":{"version":3,"sources":["/home/aronberenyi/Code/ancrypto/src/components/contexts/DataContext.js"],"names":["React","useState","useEffect","cc","moment","setApiKey","MAX_FAVOURITES","TIME_UNITS","DataContext","createContext","getCurrFavourite","favourites","currFavInLocal","getFromLocal","item","data","JSON","parse","localStorage","getItem","answer","fetchPrices","coinsArr","returnData","forEach","coin","priceData","priceFull","push","e","console","error","fetchCoins","coins","coinList","Data","log","historicalPromises","currFavourite","interval","promises","i","date","subtract","toDate","priceHistorical","Promise","all","fetchHistorical","results","historical","name","map","ticker","index","valueOf","USD","DataProvider","children","page","setPage","firstVisit","setFirstVisit","setFavourites","setCurrFavourite","setCoinList","filteredCoins","setFilteredCoins","prices","setPrices","historicalData","setHistoricalData","historicalInterval","setHistoricalInterval","init","length","updatePrices","newPrices","addCoin","coinKey","includes","updateHistoricalPrice","setItem","stringify","removeCoin","updatedFavs","filter","key"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport cc from 'cryptocompare'\nimport moment from 'moment'\n\n\ncc.setApiKey('6bce00cebd36b06c07f20e0e94c2a0fe1b0211dc0a8a8dc030f6fb8b4117f707')\n\nconst MAX_FAVOURITES = 10;\nconst TIME_UNITS = 10; \n\nexport const DataContext = React.createContext();\n\nfunction getCurrFavourite(favourites) {\n  let currFavInLocal = getFromLocal('currFavourite')\n  if (currFavInLocal) {return currFavInLocal}\n  else if (favourites) {return favourites[0]}\n  else return null\n}\n\nfunction getFromLocal (item) {\n  let data = JSON.parse(localStorage.getItem('ancrypto'))\n  let answer = data ? data[item] : [];\n  return answer\n}\n\nconst fetchPrices = async (coinsArr) => {\n        \n  const returnData = [];\n  coinsArr.forEach(async (coin) => {\n    try {\n        let priceData = await cc.priceFull(coin, 'USD');\n        returnData.push(priceData)\n    } catch(e) { console.error('Fetch price error: ', e) }\n  })\n  return returnData\n    \n}\n\nconst fetchCoins = async () => {\n  let coins = await cc.coinList()\n  coins = coins.Data\n  try {return coins}\n  catch(e) {console.log(e)}\n}\n\nconst historicalPromises = (currFavourite, interval) => {\n  let promises = [];\n  for (let i = TIME_UNITS; i > 0; i--) {\n    const date = moment().subtract(i, interval).toDate()\n    promises.push(\n      cc.priceHistorical(\n        currFavourite, \n        ['USD'], \n        date\n    ))\n  }\n\n  return Promise.all(promises)\n\n}\n\nconst fetchHistorical = async (currFavourite, interval) => {\n\n  const results = await historicalPromises(currFavourite, interval)\n  const historical = [\n    {\n      name: currFavourite,\n      data: results.map((ticker, index) => [\n        moment().subtract(TIME_UNITS - index, interval).valueOf(),\n        ticker.USD\n      ])\n    }\n  ]\n  return historical\n}\n\nexport const DataProvider = ({children}) => {\n\n  // ==============STATE========================\n  const [page, setPage] = useState('dashboard');\n  const [firstVisit, setFirstVisit] = useState(localStorage.getItem('ancrypto') ? false : true)\n  const [favourites, setFavourites] = useState(firstVisit ? [] : getFromLocal('favourites'));\n  const [currFavourite, setCurrFavourite] = useState(getCurrFavourite())\n  const [coinList, setCoinList] = useState(null)\n  const [filteredCoins, setFilteredCoins] = useState([])\n  const [prices, setPrices] = useState(null);\n  const [historicalData, setHistoricalData] = useState([])\n  const [historicalInterval, setHistoricalInterval] = useState(\"months\")\n\n  // Fetch Coin data at startup\n  useEffect(() => {\n\n    const init = async () => {\n      const coins = await fetchCoins()\n      if (currFavourite.length > 0 ) {\n        const historical = await fetchHistorical(currFavourite, historicalInterval)\n        setHistoricalData(historical)\n      }\n      setCoinList(coins)\n    }           \n    init()\n\n  }, [])\n\n  // Fetch the pices of favourites\n  useEffect(() => {\n\n    const updatePrices = async (coinsArr) => {\n      let newPrices = await fetchPrices(coinsArr)\n      setPrices(newPrices)\n    }\n    updatePrices(favourites)\n\n  },[favourites])\n\n  const addCoin = coinKey => {\n    if(currFavourite.length === 0) {setCurrFavourite(coinKey)}\n    if((favourites.length < MAX_FAVOURITES ) && !favourites.includes(coinKey)) {\n      setFavourites([...favourites, coinKey]);\n    }\n  }\n\n  useEffect(() => {\n    const updateHistoricalPrice = async () => {\n      if (currFavourite) {\n        const historical = await fetchHistorical(currFavourite, historicalInterval)\n        setHistoricalData(historical)\n      }\n    }\n    setHistoricalData(null)\n    updateHistoricalPrice()\n\n  }, [currFavourite, historicalInterval])\n  // Handle localstorage updates\n  useEffect(() => {\n    localStorage.setItem('ancrypto', JSON.stringify({\n      favourites,\n      currFavourite\n    }))\n  },[currFavourite, favourites])\n\n  const removeCoin = coinKey => {\n    const updatedFavs = favourites.filter(key => key !== coinKey)\n    if( favourites.includes(coinKey) ) {console.log(true, favourites, coinKey) ; setCurrFavourite(updatedFavs[0])}\n    setFavourites(updatedFavs)\n  }\n\n\n\n  return (\n  <DataContext.Provider value={\n    {\n      page, \n      coinList,\n      setPage, \n      historicalData,\n      favourites,\n      setFavourites,\n      historicalInterval,\n      setHistoricalInterval,\n      currFavourite,\n      setCurrFavourite, \n      filteredCoins,\n      setFilteredCoins,\n      addCoin, \n      removeCoin, \n      firstVisit,\n      prices\n    }\n  }>{children}</DataContext.Provider>\n  )\n}"]},"metadata":{},"sourceType":"module"}