{"ast":null,"code":"var _jsxFileName = \"/home/aronberenyi/Code/ancrypto/src/components/contexts/DataContext.js\";\nimport React, { useState, useEffect } from 'react';\nimport cc from 'cryptocompare';\nimport moment from 'moment';\ncc.setApiKey('6bce00cebd36b06c07f20e0e94c2a0fe1b0211dc0a8a8dc030f6fb8b4117f707');\nconst MAX_FAVOURITES = 10;\nconst TIME_UNITS = 10;\nexport const DataContext = React.createContext();\n\nfunction getCurrFavourite(favourites) {\n  let currFavInLocal = getFromLocal('currFavourite');\n\n  if (currFavInLocal) {\n    return currFavInLocal;\n  } else if (favourites) {\n    return favourites[0];\n  } else return [];\n}\n\nfunction getFromLocal(item) {\n  let data = JSON.parse(localStorage.getItem('ancrypto'));\n  let answer = data ? data[item] : [];\n  return answer;\n}\n\nconst fetchPrices = async coinsArr => {\n  const returnData = [];\n  coinsArr.forEach(async coin => {\n    try {\n      let priceData = await cc.priceFull(coin, 'USD');\n      returnData.push(priceData);\n    } catch (e) {\n      console.error('Fetch price error: ', e);\n    }\n  });\n  return returnData;\n};\n\nconst fetchCoins = async () => {\n  let coins = await cc.coinList();\n  coins = coins.Data;\n\n  try {\n    return coins;\n  } catch (e) {\n    console.log(e);\n  }\n};\n\nconst historicalPromises = currFavourite => {\n  let now = moment();\n  let promises = [];\n\n  for (let i = TIME_UNITS; i > 0; i--) {\n    const date = moment().subtract(i, 'months').toDate();\n    console.log(date);\n    promises.push(cc.priceHistorical(currFavourite, ['USD'], now.subtract(i, 'months')).toDate().getTime());\n  }\n\n  return Promise.all(promises);\n};\n\nconst fetchHistorical = async currFavourite => {\n  const results = await historicalPromises(currFavourite);\n  return results;\n};\n\nexport const DataProvider = ({\n  children\n}) => {\n  // ==============STATE========================\n  const [page, setPage] = useState('dashboard');\n  const [firstVisit, setFirstVisit] = useState(localStorage.getItem('ancrypto') ? false : true);\n  const [favourites, setFavourites] = useState(firstVisit ? [] : getFromLocal('favourites'));\n  const [currFavourite, setCurrFavourite] = useState(getCurrFavourite());\n  const [coinList, setCoinList] = useState(null);\n  const [filteredCoins, setFilteredCoins] = useState([]);\n  const [prices, setPrices] = useState(null);\n  const [historicalData, setHistoricalData] = useState([]); // Fetch Coin data at startup\n\n  useEffect(() => {\n    const init = async () => {\n      const coins = await fetchCoins();\n\n      if (currFavourite.length > 0) {\n        const historical = await fetchHistorical(currFavourite);\n        console.log(historical);\n        setHistoricalData(historical);\n      }\n\n      setCoinList(coins);\n    };\n\n    init();\n  }, []); // Fetch the pices of favourites\n\n  useEffect(() => {\n    const updatePrices = async coinsArr => {\n      let newPrices = await fetchPrices(coinsArr);\n      setPrices(newPrices);\n    };\n\n    updatePrices(favourites);\n  }, [favourites]);\n\n  const addCoin = coinKey => {\n    if (currFavourite.length === 0) {\n      setCurrFavourite(coinKey);\n    }\n\n    if (favourites.length < MAX_FAVOURITES && !favourites.includes(coinKey)) {\n      setFavourites([...favourites, coinKey]);\n    }\n  }; // Handle localstorage updates\n\n\n  useEffect(() => {\n    localStorage.setItem('ancrypto', JSON.stringify({\n      favourites,\n      currFavourite\n    }));\n  }, [currFavourite, favourites]);\n\n  const removeCoin = coinKey => {\n    const updatedFavs = favourites.filter(key => key !== coinKey);\n\n    if (favourites.includes(coinKey)) {\n      console.log(true, favourites, coinKey);\n      setCurrFavourite(updatedFavs[0]);\n    }\n\n    setFavourites(updatedFavs);\n  };\n\n  return /*#__PURE__*/React.createElement(DataContext.Provider, {\n    value: {\n      page,\n      coinList,\n      setPage,\n      favourites,\n      setFavourites,\n      currFavourite,\n      setCurrFavourite,\n      filteredCoins,\n      setFilteredCoins,\n      addCoin,\n      removeCoin,\n      firstVisit,\n      prices\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 3\n    }\n  }, children);\n};","map":{"version":3,"sources":["/home/aronberenyi/Code/ancrypto/src/components/contexts/DataContext.js"],"names":["React","useState","useEffect","cc","moment","setApiKey","MAX_FAVOURITES","TIME_UNITS","DataContext","createContext","getCurrFavourite","favourites","currFavInLocal","getFromLocal","item","data","JSON","parse","localStorage","getItem","answer","fetchPrices","coinsArr","returnData","forEach","coin","priceData","priceFull","push","e","console","error","fetchCoins","coins","coinList","Data","log","historicalPromises","currFavourite","now","promises","i","date","subtract","toDate","priceHistorical","getTime","Promise","all","fetchHistorical","results","DataProvider","children","page","setPage","firstVisit","setFirstVisit","setFavourites","setCurrFavourite","setCoinList","filteredCoins","setFilteredCoins","prices","setPrices","historicalData","setHistoricalData","init","length","historical","updatePrices","newPrices","addCoin","coinKey","includes","setItem","stringify","removeCoin","updatedFavs","filter","key"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport cc from 'cryptocompare'\nimport moment from 'moment'\n\n\ncc.setApiKey('6bce00cebd36b06c07f20e0e94c2a0fe1b0211dc0a8a8dc030f6fb8b4117f707')\n\nconst MAX_FAVOURITES = 10;\nconst TIME_UNITS = 10; \n\nexport const DataContext = React.createContext();\n\nfunction getCurrFavourite(favourites) {\n  let currFavInLocal = getFromLocal('currFavourite')\n  if (currFavInLocal) {return currFavInLocal}\n  else if (favourites) {return favourites[0]}\n  else return []\n}\n\nfunction getFromLocal (item) {\n  let data = JSON.parse(localStorage.getItem('ancrypto'))\n  let answer = data ? data[item] : [];\n  return answer\n}\n\nconst fetchPrices = async (coinsArr) => {\n        \n  const returnData = [];\n  coinsArr.forEach(async (coin) => {\n    try {\n        let priceData = await cc.priceFull(coin, 'USD');\n        returnData.push(priceData)\n    } catch(e) { console.error('Fetch price error: ', e) }\n  })\n  return returnData\n    \n}\n\nconst fetchCoins = async () => {\n  let coins = await cc.coinList()\n  coins = coins.Data\n  try {return coins}\n  catch(e) {console.log(e)}\n}\n\nconst historicalPromises = currFavourite => {\n  let now = moment()\n  let promises = [];\n  for (let i = TIME_UNITS; i > 0; i--) {\n    const date = moment().subtract(i, 'months').toDate()\n    console.log( date)\n    promises.push(\n      cc.priceHistorical(\n        currFavourite, \n        ['USD'], \n        now.subtract(i, 'months')).toDate().getTime()\n    )\n  }\n\n  return Promise.all(promises)\n\n}\n\nconst fetchHistorical = async (currFavourite) => {\n\n  const results = await historicalPromises(currFavourite)\n  return results\n}\n\nexport const DataProvider = ({children}) => {\n\n  // ==============STATE========================\n  const [page, setPage] = useState('dashboard');\n  const [firstVisit, setFirstVisit] = useState(localStorage.getItem('ancrypto') ? false : true)\n  const [favourites, setFavourites] = useState(firstVisit ? [] : getFromLocal('favourites'));\n  const [currFavourite, setCurrFavourite] = useState(getCurrFavourite())\n  const [coinList, setCoinList] = useState(null)\n  const [filteredCoins, setFilteredCoins] = useState([])\n  const [prices, setPrices] = useState(null);\n  const [historicalData, setHistoricalData] = useState([])\n\n  // Fetch Coin data at startup\n  useEffect(() => {\n\n    const init = async () => {\n      const coins = await fetchCoins()\n      if (currFavourite.length > 0 ) {\n        const historical = await fetchHistorical(currFavourite)\n        console.log(historical)\n        setHistoricalData(historical)\n      }\n      setCoinList(coins)\n    }           \n    init()\n\n  }, [])\n\n  // Fetch the pices of favourites\n  useEffect(() => {\n\n    const updatePrices = async (coinsArr) => {\n      let newPrices = await fetchPrices(coinsArr)\n      setPrices(newPrices)\n    }\n    updatePrices(favourites)\n\n  },[favourites])\n\n  const addCoin = coinKey => {\n    if(currFavourite.length === 0) {setCurrFavourite(coinKey)}\n    if((favourites.length < MAX_FAVOURITES ) && !favourites.includes(coinKey)) {\n      setFavourites([...favourites, coinKey]);\n    }\n  }\n  // Handle localstorage updates\n  useEffect(() => {\n    localStorage.setItem('ancrypto', JSON.stringify({\n      favourites,\n      currFavourite\n    }))\n  },[currFavourite, favourites])\n\n  const removeCoin = coinKey => {\n    const updatedFavs = favourites.filter(key => key !== coinKey)\n    if( favourites.includes(coinKey) ) {console.log(true, favourites, coinKey) ; setCurrFavourite(updatedFavs[0])}\n    setFavourites(updatedFavs)\n  }\n\n\n\n  return (\n  <DataContext.Provider value={\n    {\n      page, \n      coinList,\n      setPage, \n      favourites,\n      setFavourites,\n      currFavourite,\n      setCurrFavourite, \n      filteredCoins,\n      setFilteredCoins,\n      addCoin, \n      removeCoin, \n      firstVisit,\n      prices\n    }\n  }>{children}</DataContext.Provider>\n  )\n}"]},"metadata":{},"sourceType":"module"}