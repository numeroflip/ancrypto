{"ast":null,"code":"var _jsxFileName = \"/home/aronberenyi/Code/ancrypto/src/components/contexts/DataContext.js\";\nimport React, { useState, useEffect } from 'react';\nimport cc from 'cryptocompare';\ncc.setApiKey('6bce00cebd36b06c07f20e0e94c2a0fe1b0211dc0a8a8dc030f6fb8b4117f707');\nconst MAX_FAVOURITES = 10;\nexport const DataContext = React.createContext();\nexport const DataProvider = ({\n  children\n}) => {\n  // ==============STATE========================\n  const [page, setPage] = useState('dashboard');\n  const [firstVisit, setFirstVisit] = useState(localStorage.getItem('ancrypto') ? false : true);\n  const [favourites, setFavourites] = useState(firstVisit ? [] : getFromLocal('favourites'));\n  const [currFavourite, setCurrFavourite] = useState(getCurrFavourite());\n  const [coinList, setCoinList] = useState(null);\n  const [filteredCoins, setFilteredCoins] = useState([]);\n  const [prices, setPrices] = useState(null);\n\n  function getCurrFavourite() {\n    let currFavInLocal = getFromLocal('currFavourite');\n\n    if (currFavInLocal) {\n      return currFavInLocal;\n    } else if (favourites) {\n      return favourites[0];\n    } else return [];\n  }\n\n  function getFromLocal(item) {\n    let data = JSON.parse(localStorage.getItem('ancrypto'));\n    let answer = data ? data[item] : [];\n    return answer;\n  }\n\n  const addCoin = coinKey => {\n    if (favourites.length < MAX_FAVOURITES && !favourites.includes(coinKey)) {\n      setFavourites([...favourites, coinKey]);\n    }\n  };\n\n  const updateFavsInLocalStorage = (favourites, currFavourite) => {\n    if (!favourites.length) {\n      setCurrFavourite([]);\n    }\n\n    localStorage.setItem('ancrypto', JSON.stringify({\n      favourites,\n      currFavourite\n    }));\n  }; // Write favourites into localstorage\n\n\n  useEffect(() => {\n    updateFavsInLocalStorage(favourites, currFavourite);\n  }, [favourites, currFavourite]);\n  useEffect(() => {\n    if (!favourites.includes(currFavourite) && favourites.length > 0) {\n      setCurrFavourite(favourites[0]);\n    }\n  }, [favourites]); // Fetch Coin data at startup\n\n  useEffect(() => {\n    const fetchCoins = async () => {\n      let coins = await cc.coinList();\n      coins = coins.Data;\n\n      try {\n        return coins;\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    const updateStateWithCoins = async () => {\n      const coins = await fetchCoins();\n      setCoinList(coins);\n    };\n\n    updateStateWithCoins();\n  }, []); // Fetch the pices of favourites\n\n  useEffect(() => {\n    const fetchPrices = async coinsArr => {\n      const returnData = [];\n      coinsArr.forEach(async coin => {\n        try {\n          let priceData = await cc.priceFull(coin, 'USD');\n          returnData.push(priceData);\n        } catch (e) {\n          console.error('Fetch price error: ', e);\n        }\n      });\n      return returnData;\n    };\n\n    const updatePrices = async coinsArr => {\n      let newPrices = await fetchPrices(coinsArr);\n      setPrices(newPrices);\n    };\n\n    updatePrices(favourites);\n  }, [favourites]);\n\n  const removeCoin = coinKey => {\n    setFavourites(favourites.filter(key => key !== coinKey));\n  };\n\n  return /*#__PURE__*/React.createElement(DataContext.Provider, {\n    value: {\n      page,\n      coinList,\n      setPage,\n      favourites,\n      setFavourites,\n      currFavourite,\n      setCurrFavourite,\n      filteredCoins,\n      setFilteredCoins,\n      addCoin,\n      removeCoin,\n      firstVisit,\n      prices\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 3\n    }\n  }, children);\n};","map":{"version":3,"sources":["/home/aronberenyi/Code/ancrypto/src/components/contexts/DataContext.js"],"names":["React","useState","useEffect","cc","setApiKey","MAX_FAVOURITES","DataContext","createContext","DataProvider","children","page","setPage","firstVisit","setFirstVisit","localStorage","getItem","favourites","setFavourites","getFromLocal","currFavourite","setCurrFavourite","getCurrFavourite","coinList","setCoinList","filteredCoins","setFilteredCoins","prices","setPrices","currFavInLocal","item","data","JSON","parse","answer","addCoin","coinKey","length","includes","updateFavsInLocalStorage","setItem","stringify","fetchCoins","coins","Data","e","console","log","updateStateWithCoins","fetchPrices","coinsArr","returnData","forEach","coin","priceData","priceFull","push","error","updatePrices","newPrices","removeCoin","filter","key"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport cc from 'cryptocompare'\n\n\ncc.setApiKey('6bce00cebd36b06c07f20e0e94c2a0fe1b0211dc0a8a8dc030f6fb8b4117f707')\n\nconst MAX_FAVOURITES = 10;\n\nexport const DataContext = React.createContext();\n\n\nexport const DataProvider = ({children}) => {\n\n  // ==============STATE========================\n  const [page, setPage] = useState('dashboard');\n  const [firstVisit, setFirstVisit] = useState(localStorage.getItem('ancrypto') ? false : true)\n  const [favourites, setFavourites] = useState(firstVisit ? [] : getFromLocal('favourites'));\n  const [currFavourite, setCurrFavourite] = useState(getCurrFavourite())\n  const [coinList, setCoinList] = useState(null)\n  const [filteredCoins, setFilteredCoins] = useState([])\n  const [prices, setPrices] = useState(null);\n\n\n  function getCurrFavourite() {\n    let currFavInLocal = getFromLocal('currFavourite')\n    if (currFavInLocal) {return currFavInLocal}\n    else if (favourites) {return favourites[0]}\n    else return []\n  }\n\n  function getFromLocal (item) {\n    let data = JSON.parse(localStorage.getItem('ancrypto'))\n    let answer = data ? data[item] : [];\n    return answer\n  }\n\n  const addCoin = coinKey => {\n    if((favourites.length < MAX_FAVOURITES ) && !favourites.includes(coinKey)) {\n      setFavourites([...favourites, coinKey]);\n    }\n  }\n  const updateFavsInLocalStorage = (favourites, currFavourite) => {\n \n    if (!favourites.length) {setCurrFavourite([])}\n    localStorage.setItem('ancrypto', JSON.stringify({favourites, currFavourite}))\n  }\n\n  // Write favourites into localstorage\n  useEffect(() => {\n\n    updateFavsInLocalStorage(favourites, currFavourite)\n  }, [favourites, currFavourite])\n\n  useEffect(() => {\n    if ((!favourites.includes(currFavourite)) && (favourites.length > 0)) {\n      setCurrFavourite(favourites[0])}\n  },[favourites])\n\n  // Fetch Coin data at startup\n  useEffect(() => {\n    const fetchCoins = async () => {\n      let coins = await cc.coinList()\n      coins = coins.Data\n      try {return coins}\n      catch(e) {console.log(e)}\n  }\n    const updateStateWithCoins = async () => {\n      const coins = await fetchCoins()\n      setCoinList(coins)\n    }           \n\n    updateStateWithCoins()\n\n  }, [])\n\n  // Fetch the pices of favourites\n  useEffect(() => {\n      \n    const fetchPrices = async (coinsArr) => {\n        \n      const returnData = [];\n      coinsArr.forEach(async (coin) => {\n        try {\n            let priceData = await cc.priceFull(coin, 'USD');\n            returnData.push(priceData)\n        } catch(e) { console.error('Fetch price error: ', e) }\n      })\n      return returnData\n        \n    }\n    const updatePrices = async (coinsArr) => {\n      let newPrices = await fetchPrices(coinsArr)\n      setPrices(newPrices)\n    }\n    updatePrices(favourites) \n  },[favourites])\n\n  const removeCoin = coinKey => {\n      setFavourites(favourites.filter(key => key !== coinKey))\n  }\n\n\n\n  return (\n  <DataContext.Provider value={\n    {\n      page, \n      coinList,\n      setPage, \n      favourites,\n      setFavourites,\n      currFavourite,\n      setCurrFavourite, \n      filteredCoins,\n      setFilteredCoins,\n      addCoin, \n      removeCoin, \n      firstVisit,\n      prices\n    }\n  }>{children}</DataContext.Provider>\n  )\n}"]},"metadata":{},"sourceType":"module"}