{"ast":null,"code":"var _jsxFileName = \"/home/aronberenyi/Code/ancrypto/src/components/App/AppProvider.js\";\nimport React, { useState, useEffect } from 'react';\nimport cc from 'cryptocompare';\ncc.setApiKey('6bce00cebd36b06c07f20e0e94c2a0fe1b0211dc0a8a8dc030f6fb8b4117f707');\nexport const AppContext = React.createContext();\nconst MAX_FAVOURITES = 10;\nexport default (({\n  children\n}) => {\n  function getFavsFromLocal() {\n    let data = JSON.parse(localStorage.getItem('ancrypto'));\n    let favs = data.favourites;\n    return favs ? favs : [];\n  }\n\n  const [page, setPage] = useState('settings');\n  const [firstVisit, setFirstVisit] = useState(localStorage.getItem('ancrypto') ? false : true);\n  const [favourites, setFavourites] = useState(firstVisit ? [] : getFavsFromLocal());\n  const [coinList, setCoinList] = useState(null);\n\n  const fetchCoins = async () => {\n    let coins = await cc.coinList();\n    coins = coins.Data;\n\n    try {\n      return coins;\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const addCoin = coinKey => {\n    if (favourites.length < MAX_FAVOURITES && !favourites.includes(coinKey)) {\n      setFavourites([...favourites, coinKey]);\n    }\n  };\n\n  const updateFavsInLocalStorage = favourites => {\n    localStorage.setItem('ancrypto', JSON.stringify({\n      favourites\n    }));\n  }; // Write favourites into localstorage\n\n\n  useEffect(() => updateFavsInLocalStorage(favourites), [favourites]); // Fetch Data at startup\n\n  useEffect(() => {\n    fetchCoins().then(coins => setCoinList(coins));\n  }, []);\n\n  const isInFavourites = coinKey => {\n    return favourites.includes(coinKey);\n  };\n\n  const removeCoin = coinKey => {\n    setFavourites(favourites.filter(key => key !== coinKey));\n  };\n\n  const savedSettings = () => {\n    let ancryptoData = JSON.parse(localStorage.getItem('ancrypto'));\n\n    if (!ancryptoData) {\n      setFavourites([]);\n    }\n  };\n\n  const confirmFavourites = () => {\n    setPage('dashboard');\n    setFirstVisit(false);\n    localStorage.setItem('ancrypto', JSON.stringify({\n      favourites\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(AppContext.Provider, {\n    value: {\n      page,\n      coinList,\n      setPage,\n      favourites,\n      isInFavourites,\n      setFavourites,\n      addCoin,\n      removeCoin,\n      confirmFavourites,\n      firstVisit\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 5\n    }\n  }, children);\n});","map":{"version":3,"sources":["/home/aronberenyi/Code/ancrypto/src/components/App/AppProvider.js"],"names":["React","useState","useEffect","cc","setApiKey","AppContext","createContext","MAX_FAVOURITES","children","getFavsFromLocal","data","JSON","parse","localStorage","getItem","favs","favourites","page","setPage","firstVisit","setFirstVisit","setFavourites","coinList","setCoinList","fetchCoins","coins","Data","e","console","log","addCoin","coinKey","length","includes","updateFavsInLocalStorage","setItem","stringify","then","isInFavourites","removeCoin","filter","key","savedSettings","ancryptoData","confirmFavourites"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\nimport cc from 'cryptocompare'\ncc.setApiKey('6bce00cebd36b06c07f20e0e94c2a0fe1b0211dc0a8a8dc030f6fb8b4117f707')\nexport const AppContext = React.createContext();\n\nconst MAX_FAVOURITES = 10;\n\nexport default ({children}) => {\n\n    function getFavsFromLocal() {\n        let data = JSON.parse(localStorage.getItem('ancrypto'))\n        let favs = data.favourites;\n        return favs ? favs : []\n    }\n    \n    const [page, setPage] = useState('settings');\n    const [firstVisit, setFirstVisit] = useState(localStorage.getItem('ancrypto') ? false : true)\n    const [favourites, setFavourites] = useState(firstVisit ? [] : getFavsFromLocal());\n    const [coinList, setCoinList] = useState(null)\n    \n    \n    const fetchCoins = async () => {\n        let coins = await cc.coinList()\n        coins = coins.Data\n        try {return coins}\n        catch(e) {console.log(e)}\n    }\n\n    const addCoin = coinKey => {\n        if((favourites.length < MAX_FAVOURITES ) && !favourites.includes(coinKey)) {\n            setFavourites([...favourites, coinKey]);\n        }\n    }\n    const updateFavsInLocalStorage = (favourites) => {\n        localStorage.setItem('ancrypto', JSON.stringify({favourites}))\n    }\n    // Write favourites into localstorage\n    useEffect(() => updateFavsInLocalStorage(favourites), [favourites])\n\n    // Fetch Data at startup\n    useEffect( () => {\n            fetchCoins()\n            .then(coins => setCoinList(coins))\n      \n    }, [])\n\n\n    const isInFavourites = (coinKey) => {\n        return favourites.includes(coinKey)\n    } \n\n    const removeCoin = coinKey => {\n        setFavourites(favourites.filter(key => key !== coinKey))\n    }\n\n    const savedSettings = () => {\n        let ancryptoData = JSON.parse(localStorage.getItem('ancrypto'))\n        if (!ancryptoData) {setFavourites([]);}\n    }\n\n\n\n\n    const confirmFavourites = () => {\n        setPage('dashboard');\n        setFirstVisit(false)\n        localStorage.setItem('ancrypto', JSON.stringify({favourites}))\n    }\n\n    return (\n    <AppContext.Provider value={\n        {\n            page, \n            coinList, \n            setPage, \n            favourites,\n            isInFavourites,\n            setFavourites, \n            addCoin, \n            removeCoin, \n            confirmFavourites, \n            firstVisit\n        }\n    }>{children}</AppContext.Provider>\n    )\n}"]},"metadata":{},"sourceType":"module"}