{"ast":null,"code":"var _jsxFileName = \"/home/aronberenyi/Code/ancrypto/src/components/contexts/DataContext.js\";\nimport React, { useState, useEffect } from 'react';\nimport cc, { coinList } from 'cryptocompare';\nimport moment from 'moment';\ncc.setApiKey('6bce00cebd36b06c07f20e0e94c2a0fe1b0211dc0a8a8dc030f6fb8b4117f707');\nconst MAX_FAVOURITES = 10;\nconst TIME_UNITS = 10;\nexport const DataContext = React.createContext();\n\nfunction getCurrFavourite(favourites) {\n  if (!favourites) {\n    return null;\n  }\n\n  if (favourites.length) {\n    return favourites[0];\n  }\n\n  let currFavInLocal = getFromLocal('currFavourite');\n\n  if (currFavInLocal) {\n    return currFavInLocal;\n  } else return null;\n}\n\nfunction getFromLocal(item) {\n  let data = JSON.parse(localStorage.getItem('ancrypto'));\n  let answer = data ? data[item] : [];\n  return answer;\n}\n\nconst fetchPrices = async coinsArr => {\n  let returnData = [];\n\n  try {\n    coinsArr.forEach(async coin => {\n      try {\n        let priceData = await cc.priceFull(coin, 'USD'); // Handle if there isn't any price data\n\n        if (!priceData[coin]) {\n          priceData = {\n            [coin]: {\n              noData: true\n            }\n          };\n        }\n\n        returnData.push(priceData);\n      } catch (e) {\n        console.error('Fetch price error: ', coin, e);\n      }\n    });\n  } catch (e) {\n    console.error('Error during fetching prices :', e);\n  }\n\n  return returnData;\n};\n\nconst fetchCoins = async () => {\n  try {\n    let coins = await cc.coinList();\n    coins = coins.Data;\n    const filteredCoinKeys = Object.keys(coins).filter(coinKey => coins[coinKey].IsTrading);\n    let filteredObj = {};\n    filteredCoinKeys.forEach(key => filteredObj[key] = coins[key]);\n    return filteredObj;\n  } catch (e) {\n    console.error('Error during coin fetching: ', e);\n  }\n};\n\nconst historicalPromises = (currFavourite, interval) => {\n  let promises = [];\n\n  for (let i = TIME_UNITS; i > 0; i--) {\n    const date = moment().subtract(i, interval).toDate();\n    promises.push(cc.priceHistorical(currFavourite, ['USD'], date));\n  }\n\n  return Promise.all(promises);\n};\n\nconst fetchHistorical = async (currFavourite, interval) => {\n  const results = await historicalPromises(currFavourite, interval);\n  const historical = [{\n    name: currFavourite,\n    data: results.map((ticker, index) => [moment().subtract(TIME_UNITS - index, interval).valueOf(), ticker.USD])\n  }];\n  return historical;\n};\n\nconst isDay = () => {\n  const hour = new Date().getHours();\n  return hour < 20 && hour > 7;\n}; // ===================================================================\n// ==============================DATAPROVIDER=======================================================\n// ===================================================================\n\n\nexport const DataProvider = ({\n  children\n}) => {\n  // ======================STATE========================\n  const [page, setPage] = useState('dashboard');\n  const [favourites, setFavourites] = useState(getFromLocal('favourites'));\n  const [currFavourite, setCurrFavourite] = useState(getCurrFavourite(favourites));\n  const [coinList, setCoinList] = useState(null);\n  const [filteredCoins, setFilteredCoins] = useState([]);\n  const [prices, setPrices] = useState(null);\n  const [historicalData, setHistoricalData] = useState([]);\n  const [historicalInterval, setHistoricalInterval] = useState(\"months\");\n  const [theme, setTheme] = useState(isDay() ? 'light' : 'dark'); // =============================================================\n  // =======================EFFECTS===============================\n  //--- STARTUP - init data\n  //  1 - (Fetch full coinlist and filter out the ones with no price data)\n  //  2 - (Fetch historical price data for the selected Favourite)\n\n  useEffect(() => {\n    const init = async () => {\n      try {\n        const coins = await fetchCoins(); // 1\n\n        if (currFavourite) {\n          // 2\n          const historical = await fetchHistorical(currFavourite, historicalInterval);\n          setHistoricalData(historical);\n        }\n\n        setCoinList(coins);\n      } catch (e) {\n        console.error('Error during startup coinList fetching: ', e);\n      }\n    };\n\n    init();\n  }, []); //--- Fetch prices of all the favourites\n\n  useEffect(() => {\n    const updatePrices = async coinsArr => {\n      if (favourites.length) {\n        let newPrices = await fetchPrices(coinsArr);\n        setPrices(newPrices);\n      }\n    };\n\n    updatePrices(favourites);\n  }, [favourites]); // --- Update historical prices if the selected, or the interval changes\n\n  useEffect(() => {\n    const updateHistoricalPrice = async () => {\n      if (currFavourite) {\n        try {\n          const historical = await fetchHistorical(currFavourite, historicalInterval);\n          setHistoricalData(historical);\n        } catch (e) {\n          console.error('Historical price fetching error: ', e);\n        }\n      }\n    };\n\n    setHistoricalData(null);\n    updateHistoricalPrice();\n  }, [currFavourite, historicalInterval]); // Handle localstorage updates on change\n\n  useEffect(() => {\n    localStorage.setItem('ancrypto', JSON.stringify({\n      favourites,\n      currFavourite\n    }));\n  }, [currFavourite, favourites]); // ----------------------------ADD/REMOVE COIN-------------------------------\n\n  const addCoin = coinKey => {\n    if (!currFavourite) {\n      setCurrFavourite(coinKey);\n    }\n\n    if (favourites.length < MAX_FAVOURITES && !favourites.includes(coinKey)) {\n      setFavourites([...favourites, coinKey]);\n    }\n  };\n\n  const removeCoin = coinKey => {\n    const updatedFavs = favourites.filter(key => key !== coinKey);\n\n    if (favourites.includes(coinKey)) {\n      setCurrFavourite(updatedFavs[0]);\n    }\n\n    setFavourites(updatedFavs);\n  }; // -----------------------------THEME TOGGLER--------------------------\n\n\n  const toggleTheme = () => {\n    setTheme(theme === 'light' ? 'dark' : 'light');\n  };\n\n  return /*#__PURE__*/React.createElement(DataContext.Provider, {\n    value: {\n      page,\n      theme,\n      toggleTheme,\n      coinList,\n      setPage,\n      historicalData,\n      favourites,\n      setFavourites,\n      historicalInterval,\n      setHistoricalInterval,\n      currFavourite,\n      setCurrFavourite,\n      filteredCoins,\n      setFilteredCoins,\n      addCoin,\n      removeCoin,\n      prices\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 3\n    }\n  }, children);\n};","map":{"version":3,"sources":["/home/aronberenyi/Code/ancrypto/src/components/contexts/DataContext.js"],"names":["React","useState","useEffect","cc","coinList","moment","setApiKey","MAX_FAVOURITES","TIME_UNITS","DataContext","createContext","getCurrFavourite","favourites","length","currFavInLocal","getFromLocal","item","data","JSON","parse","localStorage","getItem","answer","fetchPrices","coinsArr","returnData","forEach","coin","priceData","priceFull","noData","push","e","console","error","fetchCoins","coins","Data","filteredCoinKeys","Object","keys","filter","coinKey","IsTrading","filteredObj","key","historicalPromises","currFavourite","interval","promises","i","date","subtract","toDate","priceHistorical","Promise","all","fetchHistorical","results","historical","name","map","ticker","index","valueOf","USD","isDay","hour","Date","getHours","DataProvider","children","page","setPage","setFavourites","setCurrFavourite","setCoinList","filteredCoins","setFilteredCoins","prices","setPrices","historicalData","setHistoricalData","historicalInterval","setHistoricalInterval","theme","setTheme","init","updatePrices","newPrices","updateHistoricalPrice","setItem","stringify","addCoin","includes","removeCoin","updatedFavs","toggleTheme"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport cc, { coinList } from 'cryptocompare'\nimport moment from 'moment'\n\ncc.setApiKey('6bce00cebd36b06c07f20e0e94c2a0fe1b0211dc0a8a8dc030f6fb8b4117f707')\n\nconst MAX_FAVOURITES = 10;\nconst TIME_UNITS = 10; \n\nexport const DataContext = React.createContext();\n\nfunction getCurrFavourite(favourites) {\n  if (!favourites) {return null}\n  if (favourites.length) { return favourites[0]}\n  let currFavInLocal = getFromLocal('currFavourite')\n  if (currFavInLocal) {return currFavInLocal}\n  else return null\n}\n\nfunction getFromLocal (item) {\n  let data = JSON.parse(localStorage.getItem('ancrypto'))\n  let answer = data ? data[item] : [];\n  return answer\n}\n\nconst fetchPrices = async (coinsArr) => {\n        \n  let returnData = [];\n  try {\n    coinsArr.forEach(async (coin) => {\n      try {\n          let priceData = await cc.priceFull(coin, 'USD');\n          // Handle if there isn't any price data\n          if (!priceData[coin]) {\n            priceData = {\n              [coin]: {\n                noData: true\n              }\n            }\n          }\n          returnData.push(priceData)\n      } catch(e) { console.error('Fetch price error: ', coin, e) }\n    })\n  } catch(e) {console.error('Error during fetching prices :', e)}\n  return returnData\n    \n}\n\nconst fetchCoins = async () => {\n  try {\n  let coins = await cc.coinList()\n  coins = coins.Data\n  const filteredCoinKeys = Object.keys(coins).filter(coinKey => coins[coinKey].IsTrading)\n  let filteredObj = {}\n  filteredCoinKeys.forEach(key => filteredObj[key] = coins[key])\n  return filteredObj\n  }\n  catch(e) {console.error('Error during coin fetching: ',e)}\n}\n\nconst historicalPromises = (currFavourite, interval) => {\n  let promises = [];\n  for (let i = TIME_UNITS; i > 0; i--) {\n    const date = moment().subtract(i, interval).toDate()\n    promises.push(\n      cc.priceHistorical(\n        currFavourite, \n        ['USD'], \n        date\n    ))\n  }\n  return Promise.all(promises)\n\n}\n\nconst fetchHistorical = async (currFavourite, interval) => {\n\n  const results = await historicalPromises(currFavourite, interval)\n  const historical = [\n    {\n      name: currFavourite,\n      data: results.map((ticker, index) => [\n        moment().subtract(TIME_UNITS - index, interval).valueOf(),\n        ticker.USD\n      ])\n    }\n  ]\n  return historical\n}\n\n  const isDay = () => {\n    const hour = new Date().getHours();\n    return (hour < 20 && hour > 7) \n  }\n\n\n\n\n  // ===================================================================\n  // ==============================DATAPROVIDER=======================================================\n  // ===================================================================\nexport const DataProvider = ({children}) => {\n\n  // ======================STATE========================\n  const [page, setPage] = useState('dashboard');\n  const [favourites, setFavourites] = useState(getFromLocal('favourites'));\n  const [currFavourite, setCurrFavourite] = useState(getCurrFavourite(favourites))\n  const [coinList, setCoinList] = useState(null)\n  const [filteredCoins, setFilteredCoins] = useState([])\n  const [prices, setPrices] = useState(null);\n  const [historicalData, setHistoricalData] = useState([])\n  const [historicalInterval, setHistoricalInterval] = useState(\"months\")\n  const [theme, setTheme] = useState(isDay() ? 'light' : 'dark' );\n\n\n\n  // =============================================================\n  // =======================EFFECTS===============================\n\n\n\n\n  //--- STARTUP - init data\n  //  1 - (Fetch full coinlist and filter out the ones with no price data)\n  //  2 - (Fetch historical price data for the selected Favourite)\n  useEffect(() => {\n\n    const init = async () => {\n      try {\n        const coins = await fetchCoins()     // 1\n        if (currFavourite) {                // 2\n          const historical = await fetchHistorical(currFavourite, historicalInterval)\n          setHistoricalData(historical)\n        }\n        setCoinList(coins)\n      } catch(e) {console.error('Error during startup coinList fetching: ', (e))}\n    }    \n\n    init()\n  }, [])\n\n  //--- Fetch prices of all the favourites\n  useEffect(() => {\n    const updatePrices = async (coinsArr) => {\n      if (favourites.length) {\n        let newPrices = await fetchPrices(coinsArr)\n        setPrices(newPrices)\n      }}\n    updatePrices(favourites)  \n  }, [favourites]);\n\n  // --- Update historical prices if the selected, or the interval changes\n  useEffect(() => {\n    const updateHistoricalPrice = async () => {\n      if (currFavourite) {\n        try {\n          const historical = await fetchHistorical(currFavourite, historicalInterval)\n          setHistoricalData(historical)\n        } catch(e) {console.error('Historical price fetching error: ', e)}\n      }}\n    setHistoricalData(null)\n    updateHistoricalPrice()\n  }, [currFavourite, historicalInterval])\n\n\n  // Handle localstorage updates on change\n  useEffect(() => {\n    localStorage.setItem('ancrypto', JSON.stringify({\n      favourites,\n      currFavourite\n    }))\n  },[currFavourite, favourites])\n\n\n  // ----------------------------ADD/REMOVE COIN-------------------------------\n  const addCoin = coinKey => {\n    if(!currFavourite) {setCurrFavourite(coinKey)}\n    if((favourites.length < MAX_FAVOURITES ) && !favourites.includes(coinKey)) {\n      setFavourites([...favourites, coinKey]);\n    }\n  }\n  const removeCoin = coinKey => {\n    const updatedFavs = favourites.filter(key => key !== coinKey)\n    if( favourites.includes(coinKey) ) {setCurrFavourite(updatedFavs[0])}\n    setFavourites(updatedFavs)\n  }\n  // -----------------------------THEME TOGGLER--------------------------\n  const toggleTheme = () => {\n    setTheme(theme === 'light' ? 'dark' : 'light')\n  }\n\n\n  return (\n  <DataContext.Provider \n    value={\n      {\n        page, \n        theme,\n        toggleTheme,\n        coinList,\n        setPage, \n        historicalData,\n        favourites,\n        setFavourites,\n        historicalInterval,\n        setHistoricalInterval,\n        currFavourite,\n        setCurrFavourite, \n        filteredCoins,\n        setFilteredCoins,\n        addCoin, \n        removeCoin, \n        prices\n      }\n    }\n  >\n    {children}\n  </DataContext.Provider>\n  )\n}"]},"metadata":{},"sourceType":"module"}