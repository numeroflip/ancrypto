{"ast":null,"code":"var _jsxFileName = \"/home/aronberenyi/Code/ancrypto/src/components/contexts/DataContext.js\";\nimport React, { useState, useEffect } from 'react';\nimport cc from 'cryptocompare';\ncc.setApiKey('6bce00cebd36b06c07f20e0e94c2a0fe1b0211dc0a8a8dc030f6fb8b4117f707');\nconst MAX_FAVOURITES = 10;\nexport const DataContext = React.createContext();\nexport const DataProvider = ({\n  children\n}) => {\n  // ==============STATE========================\n  const [page, setPage] = useState('dashboard');\n  const [firstVisit, setFirstVisit] = useState(localStorage.getItem('ancrypto') ? false : true);\n  const [favourites, setFavourites] = useState(firstVisit ? [] : getFavsFromLocal());\n  const [coinList, setCoinList] = useState(null);\n  const [filteredCoins, setFilteredCoins] = useState([]);\n  const [prices, setPrices] = useState(null);\n  console.log('prices', prices);\n\n  function getFavsFromLocal() {\n    let data = JSON.parse(localStorage.getItem('ancrypto'));\n    let favs = data.favourites;\n    return favs ? favs : [];\n  }\n\n  const formatCoinList = coinList => {\n    let sortedCoinList = [];\n    Object.keys(coinList).forEact(key => {\n      let coinObj = coinList[key];\n      const order = +coinObj[\"SortOrder\"];\n      sortedCoinList[order] = coinObj;\n    });\n    console.log(sortedCoinList);\n    return sortedCoinList;\n  };\n\n  const addCoin = coinKey => {\n    if (favourites.length < MAX_FAVOURITES && !favourites.includes(coinKey)) {\n      setFavourites([...favourites, coinKey]);\n    }\n  };\n\n  const updateFavsInLocalStorage = favourites => {\n    localStorage.setItem('ancrypto', JSON.stringify({\n      favourites\n    }));\n  }; // Write favourites into localstorage\n\n\n  useEffect(() => updateFavsInLocalStorage(favourites), [favourites]); // Fetch Coin data at startup\n\n  useEffect(() => {\n    const fetchCoins = async () => {\n      let coins = await cc.coinList();\n      coins = coins.Data;\n\n      try {\n        return coins;\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    const updateStateWithCoins = async () => {\n      const coins = await fetchCoins();\n      formatCoinList(coins);\n      setCoinList(coins);\n    };\n\n    updateStateWithCoins();\n  }, []); // Fetch the pices of favourites\n\n  useEffect(() => {\n    const fetchPrices = async coinsArr => {\n      const returnData = [];\n      coinsArr.forEach(async coin => {\n        try {\n          let priceData = await cc.priceFull(coin, 'USD');\n          console.log('price Data', priceData);\n          returnData.push(priceData);\n        } catch (e) {\n          console.error('Fetch price error: ', e);\n        }\n      });\n      console.log('priceArray: ', returnData);\n      return returnData;\n    };\n\n    const updatePrices = async coinsArr => {\n      let newPrices = await fetchPrices(coinsArr);\n      newPrices.map(price => {\n        console.log(price);\n      });\n      console.log('DA PRICES: ', newPrices);\n      setPrices(newPrices);\n    };\n\n    updatePrices(favourites);\n  }, [favourites]);\n\n  const isInFavourites = coinKey => {\n    return favourites.includes(coinKey);\n  };\n\n  const removeCoin = coinKey => {\n    setFavourites(favourites.filter(key => key !== coinKey));\n  };\n\n  return /*#__PURE__*/React.createElement(DataContext.Provider, {\n    value: {\n      page,\n      coinList,\n      setPage,\n      favourites,\n      isInFavourites,\n      setFavourites,\n      filteredCoins,\n      setFilteredCoins,\n      addCoin,\n      removeCoin,\n      firstVisit,\n      prices\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 3\n    }\n  }, children);\n};","map":{"version":3,"sources":["/home/aronberenyi/Code/ancrypto/src/components/contexts/DataContext.js"],"names":["React","useState","useEffect","cc","setApiKey","MAX_FAVOURITES","DataContext","createContext","DataProvider","children","page","setPage","firstVisit","setFirstVisit","localStorage","getItem","favourites","setFavourites","getFavsFromLocal","coinList","setCoinList","filteredCoins","setFilteredCoins","prices","setPrices","console","log","data","JSON","parse","favs","formatCoinList","sortedCoinList","Object","keys","forEact","key","coinObj","order","addCoin","coinKey","length","includes","updateFavsInLocalStorage","setItem","stringify","fetchCoins","coins","Data","e","updateStateWithCoins","fetchPrices","coinsArr","returnData","forEach","coin","priceData","priceFull","push","error","updatePrices","newPrices","map","price","isInFavourites","removeCoin","filter"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport cc from 'cryptocompare'\n\n\ncc.setApiKey('6bce00cebd36b06c07f20e0e94c2a0fe1b0211dc0a8a8dc030f6fb8b4117f707')\n\nconst MAX_FAVOURITES = 10;\n\nexport const DataContext = React.createContext();\n\n\n\nexport const DataProvider = ({children}) => {\n\n  // ==============STATE========================\n  const [page, setPage] = useState('dashboard');\n  const [firstVisit, setFirstVisit] = useState(localStorage.getItem('ancrypto') ? false : true)\n  const [favourites, setFavourites] = useState(firstVisit ? [] : getFavsFromLocal());\n  const [coinList, setCoinList] = useState(null)\n  const [filteredCoins, setFilteredCoins] = useState([])\n  const [prices, setPrices] = useState(null);\n  console.log('prices', prices)\n\n  function getFavsFromLocal() {\n    let data = JSON.parse(localStorage.getItem('ancrypto'))\n    let favs = data.favourites;\n    return favs ? favs : []\n  }\n  \n\n  const formatCoinList = (coinList) => {\n    let sortedCoinList = []\n    Object.keys(coinList).forEact(key => {\n      let coinObj = coinList[key]\n      const order = +coinObj[\"SortOrder\"]\n      sortedCoinList[order] = coinObj\n    })\n    console.log(sortedCoinList)\n    return sortedCoinList\n  }\n\n\n  \n\n\n  const addCoin = coinKey => {\n    if((favourites.length < MAX_FAVOURITES ) && !favourites.includes(coinKey)) {\n      setFavourites([...favourites, coinKey]);\n    }\n  }\n  const updateFavsInLocalStorage = (favourites) => {\n    localStorage.setItem('ancrypto', JSON.stringify({favourites}))\n  }\n\n  // Write favourites into localstorage\n  useEffect(() => updateFavsInLocalStorage(favourites), [favourites])\n\n  // Fetch Coin data at startup\n  useEffect(() => {\n    const fetchCoins = async () => {\n      let coins = await cc.coinList()\n      coins = coins.Data\n      try {return coins}\n      catch(e) {console.log(e)}\n  }\n    const updateStateWithCoins = async () => {\n      const coins = await fetchCoins()\n      formatCoinList(coins)\n      setCoinList(coins)\n    }           \n\n    updateStateWithCoins()\n\n  }, [])\n\n  // Fetch the pices of favourites\n  useEffect(() => {\n      \n    const fetchPrices = async (coinsArr) => {\n        \n      const returnData = [];\n      coinsArr.forEach(async (coin) => {\n        try {\n            let priceData = await cc.priceFull(coin, 'USD');\n            console.log('price Data', priceData)\n            returnData.push(priceData)\n        } catch(e) { console.error('Fetch price error: ', e) }\n      })\n      console.log('priceArray: ', returnData)\n      return returnData\n        \n    }\n    const updatePrices = async (coinsArr) => {\n      let newPrices = await fetchPrices(coinsArr)\n      newPrices.map( price => {console.log(price)})\n      console.log('DA PRICES: ', newPrices)\n      setPrices(newPrices)\n    }\n    updatePrices(favourites) \n  },[favourites])\n\n\n\n  const isInFavourites = (coinKey) => {\n    return favourites.includes(coinKey)\n  } \n\n  const removeCoin = coinKey => {\n    setFavourites(favourites.filter(key => key !== coinKey))\n  }\n\n  return (\n  <DataContext.Provider value={\n    {\n      page, \n      coinList,\n      setPage, \n      favourites,\n      isInFavourites,\n      setFavourites, \n      filteredCoins,\n      setFilteredCoins,\n      addCoin, \n      removeCoin, \n      firstVisit,\n      prices\n    }\n  }>{children}</DataContext.Provider>\n  )\n}"]},"metadata":{},"sourceType":"module"}